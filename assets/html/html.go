// Code generated by go-bindata.
// sources:
// templates/html/spr.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlSprHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x49\x93\xdb\x36\x13\x3d\x4b\xbf\x02\x1f\x2f\xdf\xc5\x14\x2a\xb6\x0f\x89\x03\xb2\x92\x92\x3d\x89\x2a\x8b\x5d\x9e\x99\x2c\xa7\x14\x48\xf4\x90\x88\x41\x80\x06\x9a\x5a\xca\xd1\x7f\x4f\x01\x14\x25\x50\xdb\x4c\x52\xce\x69\xd4\x8d\xd7\xef\x3d\x76\x03\x20\x87\xfd\xef\xf5\xdb\xf9\xdd\xef\xef\xde\x90\x1a\x1b\x95\x4f\x99\xff\x43\x14\xd7\x55\x96\x80\x4e\xf2\x29\x21\xac\x06\x2e\xf2\xe9\x84\x10\x86\x12\x15\xe4\x9f\x3e\x91\xd9\xcf\xbc\x01\xb2\xdd\x92\xbf\x88\x8f\x16\xa2\xff\xfd\x6b\x6d\xfe\xef\xc8\x5b\x4d\x6e\xa4\x75\xc8\x68\x8f\x0f\xa5\x0d\x20\x27\x35\x62\x9b\xc2\xc7\x4e\x2e\xb3\x64\x6e\x34\x82\xc6\xf4\x6e\xd3\x42\x42\xca\x3e\xca\x12\x84\x35\x52\x6f\xe2\x6b\x52\xd6\xdc\x3a\xc0\xec\xfe\xee\x26\xfd\x32\x89\x68\x34\x6f\x20\x4b\x2c\x3c\x80\xb5\x60\xa3\x62\x63\x65\x25\x75\x72\x41\xf1\xb7\xf4\xfe\xdb\x74\x6e\x9a\x96\xa3\x2c\x54\x2c\xba\x78\x93\x7d\x95\x10\x7a\x22\xc1\xdb\x56\x41\xda\x98\x42\x2a\x48\x57\x50\xa4\xbc\x6d\xd3\x92\xb7\x7c\x5c\xbe\x01\xf7\xe4\x6a\x87\x1c\x3b\x97\x16\xdc\xa6\x0e\x37\x23\x9a\x42\xf1\xf2\xc3\x39\xa2\xef\xb9\x16\x35\x28\x71\x63\x25\x68\xa1\x36\x71\xbb\x6c\x07\xe7\x4a\x96\x12\x56\xad\xb1\x18\x41\x57\x52\x60\x9d\x09\x58\xca\x12\xd2\x10\x3c\x23\x52\x4b\x94\x5c\xa5\xae\xe4\x0a\xb2\x2f\x9e\x91\x86\xaf\x65\xd3\x35\x51\x42\xea\x71\xa2\x73\x60\x43\xe4\x9b\x90\x69\x13\xd4\x0f\xf2\xad\x35\x2d\x58\xdc\x64\x89\xa9\x5e\xe1\x78\xb6\xdc\xa2\x2c\xd5\x91\xdf\x51\x81\x93\x08\x7f\xf8\x27\x88\xaa\xc6\x9b\xea\x4a\x71\xd8\x6d\x51\x61\xbc\x4f\xa5\x23\x3c\x6c\xd5\x77\x8a\x97\xe0\x7d\x85\xac\x0e\xb9\xb9\xe9\x34\xda\xcd\x76\x7b\x85\x5c\x80\x2b\xad\x6c\x51\x1a\x1d\x6f\x1c\x74\x47\x9b\x9e\x2c\x5e\x7b\xb1\xfd\xa9\xb8\x42\x29\x1b\x5e\xc5\x7e\x69\x48\x38\xba\x32\x0f\xa9\xfb\x98\xb6\x52\x7f\x98\xfd\xd9\x56\x17\x1b\x8c\x2b\x89\x08\xf6\x55\xc9\xad\x48\xc8\x92\xab\x0e\xb2\xc4\x75\x4d\xc3\xed\xe6\x92\xec\x50\xe3\x1b\x1d\x49\x7f\xc3\x95\x32\x0f\x58\x43\xeb\xdb\xe3\x1e\xab\x2e\x2d\x70\x34\xf6\xdf\x13\x74\x56\x8d\x1e\x5c\xd0\x47\x1b\x36\x94\xfe\x77\x53\x1e\x14\x3e\xf7\xa8\x07\xde\x7f\x32\xef\x09\x21\xfe\xea\xa5\xfd\xdd\x4b\x08\x2b\x8c\xd8\xf8\x1f\x21\x4f\x08\x13\x72\x49\x4a\xc5\x9d\xcb\x92\x55\x6d\x9c\xd1\x0f\xfd\xe9\x10\x1c\x79\x1a\x65\x52\x29\x46\x88\x34\xb2\x7b\x82\x6d\xb9\xf5\x57\xb2\x2f\x09\x5d\x0c\x61\x0f\xee\xb5\x77\xc2\x1e\xd0\xf0\x36\xc9\x19\x15\x72\x99\x4f\x87\xb5\xfa\xf9\xe8\xe5\xc0\x5c\xc3\x95\xca\x2f\x4e\x85\xb9\x96\xeb\x7c\x34\x1b\x46\x43\x8e\xf4\x4e\x40\x90\x62\x13\xc1\x06\x43\x7b\x1c\xa3\xbd\x04\xa3\xf5\xf3\xbd\xc3\xfa\x45\xfe\xf8\xb0\x06\x73\x5c\x0b\x22\xd1\x11\x0b\x8a\xa3\x5c\x02\xb9\x7f\xbf\x18\x80\xef\x38\xd6\x24\x68\x0d\x22\x2f\x0e\xcf\x3a\xf4\x21\xee\x5f\x05\xa6\xd9\xb5\xd5\xb3\x61\x27\xa0\xef\xe4\x8f\xbb\xe8\xd0\x76\x65\x74\x15\x03\x86\xf0\x80\x68\xa4\x3e\x62\xf9\x49\xea\x81\x68\x8c\x1a\x73\x79\xd8\x19\x3a\xbe\x3e\xa6\xe3\xeb\x53\x3a\x8f\x3a\xa2\xe3\xeb\x11\x9d\xbf\x8c\x58\xfd\x32\xff\x0e\x4c\x03\x68\x37\x8c\xd6\x2f\xf3\xe9\x64\x3a\xf1\x4d\x2f\x4c\xa7\x85\xd4\x15\x29\xcc\xda\xb7\x91\x95\x46\xf4\x5f\x0c\x23\xf3\xcf\xc8\x19\xa3\xbb\x64\xec\xea\x90\x8a\x70\x8c\x06\x52\x32\x8c\xae\xb5\x52\x97\xb2\xe5\x8a\x94\xa0\xd1\x1a\x29\xc6\xca\x51\xf3\x7b\xbe\x33\x64\xb3\x61\xac\xfd\x86\xee\x83\x6b\xa3\xee\xdf\xe3\xfb\x66\xdc\x86\x70\xdf\x0a\x86\xfe\xed\xb8\xfb\x68\xb2\x39\xc3\x3a\xbf\x51\xbc\x62\x14\xeb\x10\x0c\xf0\x5d\xf8\x8b\xbf\xbb\xf7\xd1\xdc\x6b\x08\xd0\xe5\x2e\x45\xd1\x46\x4c\x22\x9f\x77\xd6\x1f\x03\x46\x51\x84\x38\xec\x69\xb7\xcb\xce\x6e\xd1\x4a\x5d\x79\xb5\xf0\x74\x67\x31\x0b\x77\x67\x3b\xb8\xb6\xfe\x83\x36\x2b\xdd\x03\x8e\xc4\x81\x3b\x10\xc7\x75\x21\x79\x5d\xba\x87\x5c\x54\x1e\x96\x2f\x0a\xbf\x86\xd6\x42\xc9\xf1\x44\xfc\xb0\x70\xd5\x40\x04\xbb\x64\x62\x04\xb9\x68\x64\xe1\x6e\xbb\x16\xac\x03\x71\x62\xe5\xb0\x70\xd5\x4a\x04\xbb\x64\x65\x04\x79\x82\x15\xa9\xab\x0b\x0c\x52\x57\x4f\x32\xe3\x71\x8f\xb9\xe9\x31\x23\x3b\x13\xe2\x5f\x55\x13\x46\x77\x3b\xfe\xfa\x31\xca\xa7\x13\xd6\xa9\xfe\x19\x94\xcc\x19\x27\xb5\x85\x87\x2c\xf1\x9f\xe9\xee\x15\xa5\xfe\x0e\x9a\x45\xc7\x6c\x66\x6c\x45\xa3\xab\x38\xc9\x9f\x8a\x64\x94\xe7\x8c\x2a\x79\x59\xab\x92\x58\x77\xc5\xac\x34\x0d\x8d\x0f\xb6\x27\x0e\x44\xef\xa1\x35\x64\xbb\xa5\x85\x32\x05\x6d\xb8\x43\xb0\x74\xbf\x78\xe2\xe7\x73\xb0\x45\x9e\x19\x0d\x6d\x3a\x6d\x67\xf4\x33\x7c\x20\xf4\xdf\x05\x8c\xf6\xff\xbe\xfd\x1d\x00\x00\xff\xff\x5f\x52\x11\x5e\xcf\x0d\x00\x00")

func templatesHtmlSprHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSprHtml,
		"templates/html/spr.html",
	)
}

func templatesHtmlSprHtml() (*asset, error) {
	bytes, err := templatesHtmlSprHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/spr.html", size: 3535, mode: os.FileMode(420), modTime: time.Unix(1513174505, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/spr.html": templatesHtmlSprHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"spr.html": &bintree{templatesHtmlSprHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

