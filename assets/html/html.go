// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6f\x73\xdb\xb8\xd1\x7f\x6d\x7f\x8a\x0d\x93\x79\x92\x9b\x09\xc5\xe4\x72\x4f\xa7\x75\x24\x4d\xaf\x4e\x32\xf5\x5c\xd2\xf3\xe4\x4f\xaf\x7d\x75\x03\x11\x2b\x11\x17\x10\xe0\x01\xa0\x64\xd5\xf5\x77\xef\x00\x20\x48\x90\xa2\x6c\x59\x49\xd3\xcc\x24\x12\xa1\xdd\xdf\xee\xfe\xb8\xd8\x5d\x90\x99\x3e\x78\xf5\xf3\xf9\xc7\x7f\x5e\xbe\x86\xc2\x94\x7c\x7e\x3a\xb5\x1f\xc0\x89\x58\xcd\x12\x14\xc9\xfc\x14\x60\x5a\x20\xa1\xf3\xd3\x13\x80\xa9\x61\x86\xe3\xfc\xfa\x1a\x26\x1f\x2e\xdf\x4f\xfe\x46\x4a\x84\x9b\x1b\xf8\x37\x84\x95\x0b\xea\xaf\x7f\x29\xe4\x63\x0d\x3f\x0b\x78\xc3\x94\x36\xd3\xcc\xeb\x39\x88\x12\x0d\x81\xc2\x98\x2a\xc5\xdf\x6b\xb6\x9e\x25\xe7\x52\x18\x14\x26\xfd\xb8\xad\x30\x81\xdc\x5f\xcd\x12\x83\x57\x26\xb3\xce\xbc\x84\xbc\x20\x4a\xa3\x99\x7d\xfa\xf8\x26\xfd\x63\x12\xc1\x08\x52\xe2\x2c\x51\xb8\x44\xa5\x50\x45\xca\x52\xb1\x15\x13\xc9\x1e\x8b\xff\x48\x3f\xfd\x98\x9e\xcb\xb2\x22\x86\x2d\x78\x6c\xf4\xe2\xf5\xec\x4f\x09\x64\x3b\x26\x48\x55\x71\x4c\x4b\xb9\x60\x1c\xd3\x0d\x2e\x52\x52\x55\x69\x4e\x2a\xd2\x57\xdf\xa2\x3e\x58\x5b\x1b\x62\x6a\x9d\x2e\x88\x4a\xb5\xd9\xf6\x60\x16\x9c\xe4\x9f\xc7\x80\xfe\x4a\x04\x2d\x90\xd3\x37\x8a\xa1\xa0\x7c\x1b\xd3\xa5\x6a\x1c\x53\x59\x33\xdc\x54\x52\x99\x48\x74\xc3\xa8\x29\x66\x14\xd7\x2c\xc7\xd4\x5d\x3c\x05\x26\x98\x61\x84\xa7\x3a\x27\x1c\x67\xcf\x9f\x42\x49\xae\x58\x59\x97\xd1\x02\x13\xfd\x85\x5a\xa3\x72\x57\x96\x84\x99\x90\xce\x7a\x67\xbe\x52\xb2\x42\x65\xb6\xb3\xc4\xde\xc4\x33\x4e\xb4\x29\x25\x65\x4b\x86\x34\xf2\xc5\x26\xce\x5b\xa2\xcd\xbb\xe6\x27\xb8\xb9\x09\x51\x8c\x41\xc9\xd5\x99\xe9\xa7\x09\x51\x86\xe5\x7c\x10\x7a\x4f\x41\x33\x83\xbf\x5a\x32\x22\xad\x7e\x7e\xde\xa2\xec\x12\x77\xe0\x6f\x9c\xfa\x4c\x03\x69\xb3\xff\x92\x93\x1c\xad\x7f\xee\x17\xd1\xae\x9f\xcb\x5a\x18\xb5\xed\x42\x1b\x31\x44\x51\xe7\x8a\x55\x86\x49\x11\xe7\xa3\xd1\x83\xbd\x04\x17\xaf\xac\xd1\xde\x86\xbb\x05\x96\x95\x64\x15\xfb\x9f\x31\x9a\xf5\x74\x27\x7a\xbd\xda\x7b\xe7\xcc\x86\x19\x83\xea\x2c\x27\x8a\x26\xb0\x26\xbc\xc6\x59\xa2\xeb\xb2\x24\x6a\xbb\xcf\x68\xd0\xb1\xb4\x47\x86\xff\x4c\x38\x97\x4b\x53\x60\x65\x49\xd2\x77\x69\xe7\x0a\x89\x91\xea\x78\x80\x5a\xf1\xdb\xc2\xbe\x4b\xfd\xdb\xdc\xf7\x60\xed\xbf\x71\xf3\x03\xf6\x3d\x32\x00\x2c\x0c\x67\xe2\x33\x28\xe4\xb3\xc4\x95\x25\x5d\x20\x9a\x04\x0a\x85\xcb\x59\x92\xe5\x5a\x67\x25\xa9\xfe\x85\x62\xf2\x9b\x9e\xe4\x5a\x37\x25\xd6\xbb\x0f\x5a\xe5\xb3\x24\xfb\x8d\xac\x89\x5f\x08\xb2\x25\xb3\xf2\xc9\x7c\x9a\xf9\x75\x97\x6d\x7b\x95\xb8\xcc\x09\x5f\x4a\x45\x56\xb8\xab\xe9\x0b\xc3\x5e\x5d\xcd\x59\x55\x6d\x4b\x52\x4d\x72\x25\xb5\x2e\x08\x53\xfa\x1e\xa6\x37\x85\xd4\x52\x2c\x2d\xd7\x93\xcd\x66\x33\x34\x7d\xa8\xaa\x42\x41\x51\x0d\xec\x1e\xa8\xdb\xdc\x41\x86\x43\xbf\x0f\x37\x9f\x93\xbc\xc0\x63\x7d\xaf\x15\x3b\xce\x71\x81\xe6\x48\x45\x52\xb2\xe5\xb6\xaf\x0b\x27\x70\x02\x2e\x23\xef\x4e\xc8\xe1\x4d\xf3\x69\x79\x6f\xd5\x5c\x96\xa5\x14\x5e\xdb\xd1\x75\x7a\x5f\x04\xdb\xd2\x59\x3e\x61\xb4\xdd\x19\x07\xc5\xdf\xa9\xed\x4d\x54\x5b\x5c\x9a\x91\xa8\x03\xf1\x7b\x0f\x36\x4c\x50\xb9\x99\x10\x4a\x5f\xaf\x51\x98\xb7\x4c\x1b\x14\xa8\x9e\x24\x5c\x12\x9a\x3c\x85\x65\x2d\x72\x5b\x59\xc0\x5e\x3f\x41\x2b\xf3\xdd\xb5\xd3\x3c\x19\xf7\xc2\xce\x02\x4f\xbe\x7b\xe9\x44\x6e\xdc\x67\xe7\x13\xc0\x34\xf3\xe3\x20\xc0\x74\x21\xe9\x16\x28\x31\x24\xf5\xfb\x3c\x25\x15\xfb\x8c\x5b\x5f\x2d\xdf\xb9\xa5\x1f\x2f\x2f\x7e\xc2\xad\x2d\x53\x56\x03\xc0\xfd\x33\xa5\x6c\x0d\x39\x27\x5a\xcf\x92\xc8\x85\x04\x18\xed\x2d\xa4\xae\xd4\x27\xde\x44\xbc\x6e\xe5\x06\x45\x70\x47\xa6\x22\xa6\xe8\xa4\x2e\x89\x29\xf6\xc9\x29\x3b\x7d\xc6\x90\x97\x6e\x29\x06\xe6\xc4\x30\x53\x53\xec\x64\xde\x36\x2b\x91\x8c\x14\xab\xa1\x50\x58\xea\xa4\x4a\x26\x46\xd0\xde\x31\x11\x00\xfb\x92\xbb\x98\x56\x74\x04\x96\x5c\x8d\xc1\x92\xab\x5d\x58\x2b\x39\x02\x4b\xae\x7a\xb0\xb6\x1d\x40\x7b\xb3\x2c\x3b\x25\xa9\x6c\xc6\x4d\x1f\xa4\x29\x4c\x59\xb9\x6a\x92\x7a\xbc\x9d\x14\xc8\x56\x85\x99\x25\x2f\xfe\xff\x99\xed\x2d\x90\xa6\xf3\x80\x97\x51\xb6\x0e\x17\x61\xad\xf8\xde\x22\xeb\x8a\x88\x91\xbc\x48\xdd\xf0\xe6\x92\x7d\xd0\x86\xa7\x99\x55\x99\x83\xd7\x1c\xcd\x9e\x94\x12\x83\x7e\x5b\x39\x51\xd7\xb8\xf7\x5a\xaa\x42\x27\x4f\xe6\x63\xcd\xbd\x05\x11\x7d\x88\x4e\xba\x6d\xf9\xae\x4f\x35\xf2\x93\x53\x1b\x5c\x49\x38\x0f\x41\xb0\x25\xe0\xef\x0d\x69\xfa\xbc\x56\x36\xdf\x26\x1f\x8c\x62\x62\xf5\x86\x93\x15\x24\xcf\x13\xb8\xb9\xf1\xad\x75\x8f\xab\xcd\xf9\x21\xf7\xca\xc9\xfc\x17\x84\x05\x72\x86\x6b\x04\x53\x30\x0d\x0a\x73\xa9\x28\x18\x09\x0b\x84\x46\x6a\xd2\x38\xd4\x78\x81\x5c\xe3\xdd\xae\x3c\x3b\xd4\x15\x21\x4d\xcf\x1d\x21\xc1\x26\x1a\xaa\xe3\x1c\xf3\x46\xed\x95\xb0\x79\x15\x08\x75\x34\x9e\xb4\xc9\x64\x33\xa7\xb9\x38\x69\x53\x35\x76\x8e\xa2\x21\x8c\xeb\x64\x94\xfa\x57\x58\x29\xcc\x89\x41\x7a\x1c\xfb\xb4\xd5\x4f\xe6\x1f\xa3\xe0\x0a\xa2\x61\x81\x28\xa0\x24\xea\x33\x52\x20\x1a\x3a\xd1\x61\xb0\x2e\xbc\xd3\x93\x31\xff\x3e\xd4\x15\x2a\x8d\x74\x9f\x7f\xf6\xef\xa8\x5d\xdd\x2a\xc2\x62\x0b\xa6\x40\x58\x4a\xce\xe5\x86\x89\x55\x23\xab\xcf\x5c\x81\x87\x69\xcd\x47\x77\x82\x64\xc2\xa0\x6a\x78\xb3\x7f\xae\xaf\x41\x11\xb1\x42\x78\xc4\x9e\xc2\x23\x0d\x67\x33\xef\x65\xe7\xe3\x5f\xb6\x8d\x5b\x0e\x97\xb3\xf9\x94\x84\x56\xe9\xab\xc4\x23\xed\x2a\xd6\x88\x39\x46\x61\xb0\xe3\xd9\x72\xbb\xbf\xf2\x7b\xa0\x79\xf8\x36\xcd\xc8\x7c\x9a\x71\x16\xfb\x1a\x68\xf5\x69\x52\xf3\xe6\xb7\x89\xff\xe8\x73\x6f\xc9\xdf\x47\x3d\x13\xab\x31\xee\x3d\x4c\xcc\x7d\x4b\xb9\xbe\x85\xef\x83\xd8\xbe\x93\x69\x1d\xd2\xf3\x7f\xc5\x71\x8f\xdf\x96\xdd\x89\x4f\xc9\xe8\xc7\xa6\xd8\xb7\xdb\xb5\xe6\x3b\xfb\x73\x41\x34\xcb\x5d\xe0\x36\x9a\xbd\x67\x9e\xbd\x3b\x91\xd1\xae\xfa\xba\x06\x14\x8a\x34\x11\x14\x98\xb1\xb7\xc7\x36\xc6\x35\xc2\xa7\xf7\x17\x0e\x29\x10\x56\x18\x53\xe9\xb3\x2c\xb3\x04\x4c\xe2\x51\x48\xaa\x55\xb6\x33\x38\x8c\x98\x56\xc8\xed\x94\x11\xf5\x0a\x2f\x6c\xa9\x9a\x78\xae\x86\x79\xd5\x8e\x16\x49\xfa\x83\x4f\x24\x1b\x75\x94\x46\x8f\x35\xf8\x89\x24\xc4\x9d\x4b\x8a\xf3\xf4\x87\x69\xe6\xbe\xc0\xa6\x60\x79\x01\x4c\x50\x66\x6b\x89\x06\x66\xdc\xa6\x2f\x6b\x6e\x58\xc5\xb1\x51\xb6\x55\x20\x27\xb5\xc6\xdd\x68\x57\xcc\x14\xf5\xc2\x4e\xbb\xf1\x10\x9a\xf5\xb2\xb1\x3d\x82\x64\x46\x21\x66\x25\xd1\x06\x55\x16\x2d\x6f\xe4\xf2\xa1\xb7\xf4\xab\xe5\xdf\x39\x51\x55\x28\x34\x68\x59\xa2\x61\x25\xea\x88\x84\x93\x91\x5e\x13\x11\xf1\xe2\x3e\x44\xbc\xe8\x13\x51\x22\x11\x8e\x84\xd2\xce\x1b\xc0\x71\xc5\x0c\x2b\x89\x41\xbe\x85\x82\xac\x71\x97\x98\x6f\x42\x48\x60\xbf\x42\x69\x6d\x13\xb5\xaa\x11\xc8\x42\xd6\xc6\xf7\x40\x2d\x95\x01\xb9\xb4\x17\x62\x75\x38\x53\xdf\xdf\x87\xa9\xe7\x63\x4c\x6d\xd0\xd1\x22\x1e\x1b\x58\x48\x53\xa0\x42\x0a\x46\x6d\x6d\x99\x32\x12\x2a\x26\x80\xca\x8d\x88\x1b\xf5\x63\x0d\xac\x2c\x91\x32\x62\x02\x89\xdf\x36\xb9\x38\x5b\xa2\x0d\x2b\x97\x65\xc5\x5d\xd6\xd3\xa8\x16\xdd\x4e\xd8\xf3\xbb\x09\xbb\xd8\x25\xcc\x52\x65\x19\xd9\xd8\x3b\xf7\x8d\xa2\xac\x45\x8e\xca\x10\x26\x6c\x6c\xcd\x2d\x6b\x1a\x4b\xc8\x5c\x77\x53\xa4\xc0\x61\xae\x84\x08\x2f\x8c\xa5\xc9\x4b\xfb\xbe\x3f\xec\x0d\x3d\x7a\xbe\x4e\x97\x18\x42\xce\x77\xab\xf7\xae\xd4\x30\xe3\xdb\x09\x28\xb4\x80\x85\xac\x85\xed\xbc\xb0\x90\x57\xbd\x9a\xfd\x70\xd4\xe7\x15\xda\xaa\xa3\xb6\x30\xb6\x98\x06\xb0\x85\xbc\xea\x4a\x75\xef\xc4\xf5\x14\xf6\x9c\xae\xa2\x1f\xe2\xa3\x54\x7f\x39\x92\x77\x37\x2f\x34\x9e\x4a\x31\x91\xb3\x8a\x70\xc8\x51\x18\x25\x19\xfd\xe2\x50\x02\x50\x17\x47\x74\x0e\xed\xbc\x1a\xba\x14\x9a\x51\x18\x9a\x6d\xbf\x8e\x8e\x77\xb6\x4d\xb5\xb3\x33\xc7\xa5\x49\x75\x41\xd4\x67\xdb\x93\x9b\xf9\x69\x6c\xb0\xee\x72\xb9\x0d\x44\x63\x6e\xba\x81\xf1\x0e\xad\xb4\x52\x68\xcc\xd6\x1e\xcd\xac\x0f\xcd\x34\x7b\x88\xa2\x22\x9b\xa0\x15\xe6\x3b\xff\xbd\xf9\x8c\xa2\x51\xb6\x2d\xb4\xe1\xb8\x69\x65\x0c\xdc\x8f\xf3\xc3\x38\x1a\x70\x43\x16\xcd\xcb\x2b\x77\xf9\x20\x4d\x4f\x4f\xdc\xcb\x30\x35\x77\x5f\xec\xd7\x62\xfe\x7f\x0f\x9f\xff\xe1\xd9\xcb\x69\x66\x8a\x78\xf5\x83\x03\x1e\xae\xfe\x9d\xf0\x1a\x87\x8b\xe7\xd6\x19\x8a\x22\x8f\x7e\x99\x66\xc1\x88\x3d\x40\x07\x0f\xfc\x9a\xd5\xb1\x65\xd1\x9f\xa0\x1a\x9d\x20\x41\xf7\x1f\x5a\xa2\x71\x69\xec\xbc\x67\x33\xc6\xd0\xe3\xa1\x2e\xf4\x47\x55\xe3\x57\x80\xf9\x49\xd8\x4e\x34\xc4\xf1\x84\xc4\x44\x84\xef\x9e\x0d\x24\xda\xf6\x87\xa3\xc8\x70\xba\x5f\x85\x0b\x8f\xf4\xa5\x54\x04\x94\x43\x99\x08\x29\xd1\x1d\x35\x43\x26\x1d\x6c\x73\xfc\x40\xdc\x9a\x3e\x0a\x68\x48\x83\x05\xd9\x27\x79\xdf\x50\xbb\x73\xee\xbd\x43\x1d\x3f\x5b\x1f\x11\x6a\x04\x34\x16\xea\x11\x20\xc7\xb2\xe0\x86\xc9\x23\x69\x18\x9c\x73\xbf\x20\x04\x8b\xf4\xe5\x44\x78\x94\xfd\x4c\x9c\x40\xdb\x31\xa6\x59\x57\xa2\xdb\x16\xb0\xa7\xd2\x17\x0c\x15\x51\x79\xb1\x1d\x69\x5a\xa1\x8d\x84\x97\xcf\xd1\x63\xea\xb8\xb3\xb5\xcf\x4d\xe6\xa3\xcf\x3a\xee\x75\xac\x9c\xdf\x47\x7a\xe7\x31\xc7\xa8\xdd\xf1\xe9\x34\xb5\x06\x5a\xc0\xf7\x58\x49\xb8\xb9\xc9\x16\x5c\x2e\xc2\x6c\xda\x13\xd8\xf1\xef\x6b\xa2\x0e\xe2\x68\x9f\x1f\x74\x2d\xbd\x6d\xe5\xbd\x67\xc6\xc3\x27\xd2\x4b\x29\x0d\xaa\xee\xa1\xf4\x90\x89\xe6\x15\xa8\x73\x7a\xf0\xf6\x78\x3e\x78\x9d\xec\x06\xb7\xdb\x1e\x52\x47\x2b\xee\x25\xc8\x42\xd2\xed\xfc\x74\x9a\xf9\xff\x35\xf3\x9f\x00\x00\x00\xff\xff\x3a\x0a\x44\x25\x46\x23\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 9030, mode: os.FileMode(420), modTime: time.Unix(1514145709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

