// Code generated by go-bindata.
// sources:
// templates/html/spr.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlSprHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4d\x73\xdb\x36\x13\x3e\x4b\xbf\x02\x2f\x2f\xef\x25\x14\xa6\x49\x0e\x6d\x0a\x72\xda\x71\xe2\xd6\xd3\x8f\x78\x12\xa7\x1f\xa7\xce\x8a\x58\x8b\x48\x40\x00\x01\x40\xc9\x6a\xea\xff\xde\x01\x41\x4a\xa0\x24\xca\x6e\x27\xbd\xd8\xdc\xc5\xb3\xcf\x3e\x5c\x2c\x88\x15\xfb\xdf\xcb\xd7\x17\x37\xbf\x5f\xbf\x22\xb5\x6f\x64\x39\x67\xe1\x1f\x91\xa0\x56\x45\x86\x2a\x2b\xe7\x84\xb0\x1a\x81\x97\xf3\x19\x21\xcc\x0b\x2f\xb1\xfc\xf4\x89\x2c\x7e\x86\x06\xc9\xfd\x3d\xf9\x8b\x04\xeb\x8a\xc7\xe7\x5f\x6b\xfd\x7f\x47\x5e\x2b\x72\x29\xac\xf3\x8c\x46\x7c\x17\xda\xa0\x07\x52\x7b\x6f\x72\xfc\xd8\x8a\x75\x91\x5d\x68\xe5\x51\xf9\xfc\x66\x6b\x30\x23\x55\xb4\x8a\xcc\xe3\x9d\xa7\x41\xc4\xd7\xa4\xaa\xc1\x3a\xf4\xc5\xbb\x9b\xcb\xfc\xcb\x2c\xa1\x51\xd0\x60\x91\x59\xbc\x45\x6b\xd1\x26\xc1\xda\x8a\x95\x50\xd9\x44\xc6\xdf\xf2\x77\xdf\xe6\x17\xba\x31\xe0\xc5\x52\xa6\x49\xaf\x5e\x15\x5f\x65\x84\x1e\xa5\x00\x63\x24\xe6\x8d\x5e\x0a\x89\xf9\x06\x97\x39\x18\x93\x57\x60\x60\x1c\xbe\x45\xf7\xe8\x68\xe7\xc1\xb7\x2e\x5f\x82\xcd\x9d\xdf\x8e\x68\x96\x12\xaa\x0f\xa7\x88\xbe\x07\xc5\x6b\x94\xfc\xd2\x0a\x54\x5c\x6e\xd3\x72\xd9\x16\x4f\x85\xac\x05\x6e\x8c\xb6\x3e\x81\x6e\x04\xf7\x75\xc1\x71\x2d\x2a\xcc\x3b\xe3\x09\x11\x4a\x78\x01\x32\x77\x15\x48\x2c\xbe\x78\x42\x1a\xb8\x13\x4d\xdb\x24\x0e\xa1\xc6\x8e\xd6\xa1\xed\xac\x50\x84\x42\xe9\x2e\xfb\x3e\xbd\xb1\xda\xa0\xf5\xdb\x22\xd3\xab\x17\x7e\xbc\xb7\x60\xbd\xa8\xe4\x81\xde\x51\x80\x13\x1e\xff\x08\x6f\x90\x44\x8d\x9b\xea\x4c\x70\xd7\x6d\x49\x60\xda\xa7\xc2\x11\xe8\x5a\xf5\x5a\x42\x85\x41\x57\xe7\x55\x9d\xef\x42\xb7\xca\xdb\xed\xfd\xfd\x19\x72\x8e\xae\xb2\xc2\x78\xa1\x55\xda\x38\xde\x1d\x34\x3d\xb9\x7a\x19\x92\xed\x4e\xc5\x19\x4a\xd1\xc0\x2a\xd5\x4b\x3b\x87\xa3\x1b\x7d\x9b\xbb\x8f\xb9\x11\xea\xc3\xe2\xbd\x59\x4d\x16\xd8\x6f\x84\xf7\x68\x5f\x54\x60\x79\x46\xd6\x20\x5b\x2c\x32\xd7\x36\x0d\xd8\xed\x54\xda\x21\x26\x14\x3a\x49\xfd\x0d\x48\xa9\x6f\x7d\x8d\x26\x94\xc7\x3d\x14\x5d\x59\x04\xaf\xed\xbf\x27\x68\xad\x1c\xbd\x38\xa7\x0f\x16\x6c\x08\xfd\xef\x76\x79\xc8\xf0\xb9\xb7\x7a\xe0\xfd\x47\xfb\x4d\x02\x91\x14\xea\x03\xb1\x28\x8b\xac\xfb\x56\xb8\x1a\xd1\x67\xa4\xb6\x78\x5b\x64\xb4\x72\x8e\x36\x60\xfe\x44\xb5\x78\xef\x16\x95\x73\xfd\x77\x2f\x8a\x27\xce\x56\x45\x46\xdf\xc3\x1a\xa2\x63\xc0\x36\x22\xe0\xb3\x92\xd1\xe8\x2f\xe7\xb3\xd9\x7c\x36\x1d\xe6\xa4\x30\x66\xdb\x80\x59\x54\x56\x3b\x57\x83\xb0\xee\x24\xc1\x83\x62\x37\xb5\x76\x5a\xdd\x86\xd2\x2d\x9c\xb1\x3b\xc9\x93\xa9\x0f\x03\x0e\xb2\x92\x70\x39\xd1\x78\x3b\x11\xc2\x96\x9a\x6f\xc3\x03\x21\xdd\x1f\xc6\xc5\x9a\x54\x12\x9c\x2b\xb2\x84\x28\x23\x82\x8f\x1c\x79\xd7\xb1\x19\xe1\xe0\x21\x4f\xfd\x01\x97\xec\xed\xd1\xba\x01\x5f\x47\xc4\x35\xf8\x7a\x0a\x63\xc3\x1d\x37\x50\x5d\x77\x66\x24\x8c\x52\x7b\x9d\x01\xd0\x80\x09\xaf\xc7\xc5\x3a\x6c\x7f\x5c\xab\x9f\x8e\x6e\x5b\xe6\x1a\x90\xb2\x9c\x6c\x73\xe6\x0c\xa8\x72\xd4\xec\x8c\x76\x3e\x12\x95\x20\x27\xcb\x6d\x02\x1b\x04\xed\x70\x8c\xc6\x14\x8c\xd6\x4f\x77\x0a\xeb\x67\xe5\xc3\xdd\x3f\x88\x03\xc5\x89\xf0\x2e\x74\x02\x78\xb1\x46\xf2\xee\xcd\xd5\x00\xec\x0b\x95\x24\x79\xb6\x7f\xd7\xa1\x0e\x69\xfd\x56\xa8\x9b\xbe\xac\x81\xcd\xb7\x1c\x63\x25\x7f\xec\xad\x7d\xd9\xa5\x56\xab\x14\x30\x98\x7b\x44\x23\xd4\x01\xcb\x4f\x42\x0d\x44\x63\xd4\x98\x2b\xc0\x4e\xd0\xc1\xdd\x21\x1d\xdc\x1d\xd3\x05\xd4\x01\x1d\xdc\x8d\xe8\xc2\xd7\x9d\xd5\xcf\xcb\xef\x50\x37\xe8\xed\x96\xd1\xfa\x79\x39\x9f\xcd\x67\xa1\xe8\x4b\xdd\x2a\x2e\xd4\x8a\x2c\xf5\x5d\x28\x23\xab\x34\x8f\x23\xd8\x48\xfc\x13\x72\x42\x68\xef\x4c\x55\xed\x5d\x09\x8e\xd1\x8e\x94\x0c\x5b\x67\xac\x50\x95\x30\x20\x49\x85\xca\x5b\x2d\xf8\x38\x73\x52\xfc\xc8\x77\x82\x6c\x31\x6c\x6b\x6c\xe8\x68\x9c\xdb\xea\x38\x18\xed\x8a\xf1\xb6\x33\x77\xa5\x60\x3e\x8c\x1b\xfd\x14\x6a\x4b\xe6\xeb\xf2\x52\xc2\x8a\x51\x5f\x77\xc6\x00\xef\xcd\x5f\xc2\x65\xb8\xb3\x2e\x42\x0e\x8e\xaa\xea\x5d\xd4\xdb\x84\x89\x97\x17\xad\x0d\xc7\x80\x51\xcf\x3b\xbb\xeb\x69\xd7\x7b\x17\x6f\xbd\x15\x6a\x15\xb2\x75\x6f\x77\x12\x73\xe5\x6e\x6c\x8b\xe7\xd6\x7f\x50\x7a\xa3\x22\xe0\x20\x39\x82\x43\x7e\x18\xd7\x39\xcf\xa7\x8e\x90\xc9\xcc\xc3\xf2\x64\xe2\x97\x68\x2c\x56\xe0\x8f\x92\xef\x17\xce\x0a\x48\x60\x53\x22\x46\x90\x49\x21\x57\xee\x6d\x6b\xd0\x3a\xe4\x47\x52\xf6\x0b\x67\xa5\x24\xb0\x29\x29\x23\xc8\x23\xa4\x08\xb5\x9a\x60\x10\x6a\xf5\x28\x31\x01\xf7\x90\x9a\x88\x19\xc9\x99\x85\x9b\x7f\x3e\x63\xb4\xef\xf8\xd1\x31\x4a\x0e\x50\x19\xcf\xc9\x75\x1c\x33\x04\xf6\x67\x65\x3e\x3b\x79\xba\xcc\x0e\xd6\x4f\x09\xe7\x41\xb9\x85\xcd\xee\x32\x7a\x04\xdc\x58\xf4\x7e\x3b\x44\xf4\x2f\x90\x1c\xfc\xa9\xaf\xc0\xee\xb4\xeb\xd6\x56\xd8\x7d\x31\xf7\x47\xbe\x95\x31\xb7\x14\x25\x83\x7e\x90\x08\xbf\xe7\xdc\x0b\x4a\x03\x72\x91\xce\x07\xda\xae\x68\x7a\x17\x97\x8f\x45\x32\x0a\x25\xa3\x52\x4c\xe7\x5a\x09\x5f\xb7\xcb\x45\xa5\x9b\x74\x22\xc9\x03\x71\x47\xf4\x06\x8d\x26\xf7\xf7\x74\x29\xf5\x92\x36\xe0\x3c\x5a\xba\x5b\x3c\xd2\xf3\x39\xd8\x12\xcd\x8c\x76\x65\x3a\xae\x73\xf2\xd8\xcd\x49\x71\x3c\x62\x34\xfe\xce\xff\x3b\x00\x00\xff\xff\x95\x5a\xbd\x57\xf8\x0f\x00\x00")

func templatesHtmlSprHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSprHtml,
		"templates/html/spr.html",
	)
}

func templatesHtmlSprHtml() (*asset, error) {
	bytes, err := templatesHtmlSprHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/spr.html", size: 4088, mode: os.FileMode(420), modTime: time.Unix(1513184865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/spr.html": templatesHtmlSprHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"spr.html": &bintree{templatesHtmlSprHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
