// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x5a\x5f\x93\xdb\xb6\x11\x7f\xbe\xfb\x14\x5b\xda\x53\xbf\x98\x62\x9c\x78\x3a\xed\x85\xd2\x34\x3d\xc7\xd3\x9b\xc4\xcd\x8d\xff\x34\xed\x53\x06\x24\x56\x22\x62\x10\x60\x80\xa5\x74\xaa\x7b\xdf\x3d\x03\x80\x94\x40\x89\xba\x3b\xe9\x1c\x7b\xc6\xbe\x23\xb8\xfb\xdb\xdd\x1f\x16\xbb\x0b\x8e\xf3\x3f\xbd\xfa\xe9\xf2\xfd\x7f\xaf\xbf\x87\x8a\x6a\x39\x3b\xcf\xdd\x0f\x90\x4c\x2d\xa6\x09\xaa\x64\x76\x0e\x90\x57\xc8\xf8\xec\xfc\x0c\x20\x27\x41\x12\x67\x9f\x3e\xc1\xe4\xdd\xf5\xdb\xc9\xbf\x58\x8d\x70\x7b\x0b\xff\x87\x7e\xe5\x8a\x87\xe7\x9f\x2b\xfd\xcc\xc2\x4f\x0a\x5e\x0b\x63\x29\xcf\x82\x9e\x87\xa8\x91\x18\x54\x44\x4d\x8a\xbf\xb5\x62\x39\x4d\x2e\xb5\x22\x54\x94\xbe\x5f\x37\x98\x40\x19\x9e\xa6\x09\xe1\x0d\x65\xce\x99\x6f\xa1\xac\x98\xb1\x48\xd3\x0f\xef\x5f\xa7\x7f\x4d\x22\x18\xc5\x6a\x9c\x26\x06\xe7\x68\x0c\x9a\x48\x59\x1b\xb1\x10\x2a\x39\x60\xf1\x3f\xe9\x87\xef\xd2\x4b\x5d\x37\x8c\x44\x21\x63\xa3\x57\xdf\x4f\xff\x96\x40\xb6\x67\x82\x35\x8d\xc4\xb4\xd6\x85\x90\x98\xae\xb0\x48\x59\xd3\xa4\x25\x6b\xd8\x50\x7d\x8d\xf6\xc1\xda\x96\x18\xb5\x36\x2d\x98\x49\x2d\xad\x07\x30\x85\x64\xe5\xc7\x31\xa0\x7f\x32\xc5\x2b\x94\xfc\xb5\x11\xa8\xb8\x5c\xc7\x74\x99\x16\xc7\x54\x96\x02\x57\x8d\x36\x14\x89\xae\x04\xa7\x6a\xca\x71\x29\x4a\x4c\xfd\xc3\x73\x10\x4a\x90\x60\x32\xb5\x25\x93\x38\x7d\xf1\x1c\x6a\x76\x23\xea\xb6\x8e\x16\x84\x1a\x2e\xb4\x16\x8d\x7f\x72\x24\x4c\x95\xf6\xd6\xb7\xe6\x1b\xa3\x1b\x34\xb4\x9e\x26\x6e\x13\x2f\x24\xb3\x54\x6b\x2e\xe6\x02\x79\xe4\x8b\x4b\x9c\x1f\x99\xa5\x37\xdd\x2b\xb8\xbd\xed\xa3\x18\x83\xd2\x8b\x0b\x1a\xa6\x09\x33\x24\x4a\xb9\x13\xfa\x40\xc1\x0a\xc2\x5f\x1c\x19\x91\xd6\x30\x3f\xef\x50\xf6\x89\xbb\xe3\x6f\x9c\xfa\xc2\x02\xdb\x64\xff\xb5\x64\x25\x3a\xff\xfc\x1b\xb5\x59\xbf\xd4\xad\x22\xb3\xde\x86\x36\x62\x88\xa3\x2d\x8d\x68\x48\x68\x15\xe7\x23\xd9\x9d\xb3\x04\x57\xaf\x9c\xd1\xc1\x81\xbb\x03\x56\xd4\x6c\x11\xfb\x9f\x09\x9e\x0d\x74\x27\x76\xb9\x38\xb8\x73\xb4\x12\x44\x68\x2e\x4a\x66\x78\x02\x4b\x26\x5b\x9c\x26\xb6\xad\x6b\x66\xd6\x87\x8c\xf6\x3a\x8e\xf6\xc8\xf0\xdf\x99\x94\x7a\x4e\x15\x36\x8e\x24\x7b\x9f\x76\x69\x90\x91\x36\xa7\x03\xb4\x46\xde\x15\xf6\x7d\xea\x5f\x66\xdf\x7b\x6b\x7f\xc4\xe6\xf7\xd8\x47\x64\x00\x38\x18\x29\xd4\x47\x30\x28\xa7\x89\x2f\x4b\xb6\x42\xa4\x04\x2a\x83\xf3\x69\x92\x95\xd6\x66\x35\x6b\xfe\x87\x6a\xf2\xab\x9d\x94\xd6\x76\x25\x36\xb8\x0f\xd6\x94\xd3\x24\xfb\x95\x2d\x59\x58\xe8\x65\x6b\xe1\xe4\x93\x59\x9e\x85\x75\x9f\x6d\x07\x95\xa4\x2e\x99\x9c\x6b\xc3\x16\xb8\xaf\x19\x0a\xc3\x41\x5d\x2b\x45\xd3\xac\x6b\xd6\x4c\x4a\xa3\xad\xad\x98\x30\xf6\x08\xd3\xab\x4a\x5b\xad\xe6\x8e\xeb\x49\xc9\xca\x0a\x77\x8d\x3f\x54\xb9\x35\x62\xc7\xec\x03\x15\x15\xd2\x50\x11\xce\xc0\xef\xcc\xfd\x1b\x13\xc3\xac\x56\xab\x6e\x7b\x8e\x56\x2d\x75\x5d\x6b\x15\xb4\x7d\xc0\xe7\xc7\x22\xb8\xd6\x26\xca\x89\xe0\x9b\x0c\x79\x50\xe8\x5b\xb5\x5d\xe6\xdc\x10\x92\x85\x29\x04\x20\x2f\x34\x5f\x03\x67\xc4\xd2\x90\x5e\x29\x6b\xc4\x47\x5c\x87\x43\xfa\xc6\x2f\x7d\x77\x7d\xf5\x03\xae\xdd\xe9\x70\x1a\x00\xfe\x9f\x9c\x8b\x25\x94\x92\x59\x3b\x4d\x22\xbb\x09\x08\x3e\x58\x48\x7d\x85\x49\x82\x89\x78\xdd\xc9\xed\x9c\xbd\x3d\x99\x86\x51\xb5\x95\xba\x66\x54\x1d\x92\x33\x6e\xe8\x89\x21\xaf\xfd\x52\x0c\x2c\x19\x09\x6a\x39\x6e\x65\x7e\xec\x56\x22\x19\xad\x16\xbb\x42\xfd\xd2\x56\xaa\x16\x6a\x04\xed\x8d\x50\x3d\xe0\x50\x72\x1f\xd3\x89\x8e\xc0\xb2\x9b\x31\x58\x76\xb3\x0f\xeb\x24\x47\x60\xd9\xcd\x00\x36\x6c\x57\xb7\x57\x8e\x9c\x9a\x35\x2e\x17\xb8\x58\xba\x02\x15\xde\x55\x5f\xcf\xce\xcf\x72\xdb\x30\x35\xb2\x9d\xa9\x6f\xf5\xbe\x2c\xed\x14\xed\x3c\x73\x2a\x33\x08\x9a\xa3\x9b\x9e\x72\x46\x18\x92\xcf\x8b\xfa\x32\x7f\xd0\x52\xd3\xd7\xfd\x64\x36\xd6\x0a\x36\x20\xea\x30\x84\x62\xb5\x98\xaf\x41\x58\x9d\x96\xa1\x5b\x6c\xb1\x36\xed\xc3\xd7\xbc\x0e\x6d\x72\xee\x42\xaf\x99\x94\x7d\x88\x62\x0e\xf8\x5b\x97\x94\xf6\xb2\x35\x2e\x89\x26\xef\xc8\x08\xb5\x78\x2d\xd9\x02\x92\x17\x09\xdc\xde\x86\x32\x7d\xc0\x8b\x6e\x16\x2d\x83\x72\x32\xfb\x19\xa1\x40\x29\x70\x89\x40\x95\xb0\x60\xb0\xd4\x86\x03\x69\x28\x10\x3a\xa9\x49\xe7\x50\xe7\x05\x4a\x8b\xf7\xbb\xf2\xd5\x43\x5d\x51\x9a\x06\xee\x28\x0d\x2e\x7b\xd0\x9c\xe6\x58\x30\xea\x9e\x94\x3b\x5e\x3d\xa1\x9e\xc6\xb3\x3e\xad\x32\x97\x57\xdd\xc3\xd9\x26\x01\x63\xe7\x38\x12\x13\xd2\x26\xa3\xd4\xbf\xc2\xc6\x60\xc9\x08\xf9\x69\xec\xf3\x8d\x7e\x32\x7b\x1f\x05\x57\x31\x0b\x05\xa2\x82\x9a\x99\x8f\xc8\x81\x59\xd8\x8a\xee\x06\xeb\xc3\x3b\x3f\x1b\xf3\xef\x5d\xdb\xa0\xb1\xc8\x0f\xf9\xe7\xfe\x8e\xda\xb5\x1b\x45\x28\xd6\x40\x15\xc2\x5c\x4b\xa9\x57\x42\x2d\x3a\x59\x7b\xe1\x94\x01\xf2\x56\x8e\x9e\x13\x2d\x14\xa1\xe9\x78\x73\x7f\x3e\x7d\x02\xc3\xd4\x02\xe1\xa9\x78\x0e\x4f\x2d\x5c\x4c\x83\x97\x5b\x1f\xff\xb1\xee\xdc\xf2\xb8\x52\xcc\x72\xd6\xb7\x9b\x30\xc0\x3c\xb5\xbe\x0c\x8d\x98\x13\x1c\xf6\x8f\x98\x3f\x56\x5e\x27\xcf\xd8\x2c\xcf\xa4\x88\x9d\xe9\x79\x0b\x79\xd0\xca\xee\xdd\x24\xfc\x18\x92\xeb\xd8\x3d\xc4\xad\x50\x8b\x31\x72\x03\x4c\x4c\xee\x86\x53\x7b\x07\xa1\x0f\xa2\xf3\x5e\x2a\x6d\x9f\x7f\x7f\x18\x89\x03\x02\x37\xf4\x4d\x42\x52\x45\x2f\xbb\x32\xbe\x39\x70\xad\xdc\x3b\x61\x05\xb3\xa2\xf4\x91\x39\x77\x0f\x4e\xc0\x07\xcf\x92\xe0\xdb\xfa\xe9\x3b\x69\x5f\x84\x99\xe2\x20\xc8\xf1\xef\xfa\xd5\x12\xe1\xc3\xdb\x2b\x8f\xd4\x33\x52\x11\x35\xf6\x22\xcb\x5c\xb7\x9a\xc4\x63\x89\x36\x8b\x6c\xaf\x9f\x8f\x98\x36\x28\x5d\xf3\x8f\x7a\x41\x10\x76\x54\x4d\x02\x57\xbb\x89\xb3\xe9\xf8\x49\xfa\x32\x64\x8a\x8b\x3a\xca\x93\x67\x16\xc2\xa0\xd0\xc7\x5d\x6a\x8e\xb3\xf4\x65\x9e\xf9\x5f\x60\x55\x89\xb2\x02\xa1\xb8\x70\xd5\xc0\x82\x20\x7f\x6c\xeb\x56\x92\x68\x24\x76\xca\xee\x1c\x97\xac\xb5\xb8\x1f\xed\x42\x50\xd5\x16\x6e\xe6\x8b\x47\xb1\x6c\x90\x6e\xe1\x4a\x21\xd0\x66\x64\x10\xb3\x9a\x59\x42\x93\x45\xcb\x2b\x3d\x7f\x12\x2c\xfd\xe2\xf8\xf7\x4e\x34\x0d\x2a\x0b\x56\xd7\x48\xa2\x46\x1b\x91\x70\x36\xd2\x2d\x22\x22\xbe\x39\x86\x88\x6f\x86\x44\xd4\xc8\x94\x27\xa1\x16\x8b\x8a\x40\xe2\x42\x90\xa8\x19\xa1\x5c\x43\xc5\x96\xb8\x4f\xcc\x17\x21\xa4\x67\xbf\x41\xed\x6c\x33\xb3\x68\x11\x58\xa1\x5b\x0a\x5d\xcc\x6a\x43\xa0\xe7\xee\x41\x2d\x1e\xce\xd4\xd7\xc7\x30\xf5\x62\x8c\xa9\x15\x7a\x5a\xd4\x33\x82\x42\x53\x85\x06\x39\x90\x59\xbb\x3a\x44\x1a\x1a\xa1\x80\xeb\x95\x8a\x5b\xed\x33\x0b\xa2\xae\x91\x0b\x46\x3d\x89\x5f\x36\xb9\xa4\x98\xa3\x0b\xab\xd4\x75\x23\x7d\xd6\xf3\xa8\x16\xdd\x4d\xd8\x8b\xfb\x09\xbb\xda\x27\xcc\x51\xe5\x18\x59\xb9\x9d\xfb\x42\x51\xb6\xaa\x44\x43\x4c\x28\x17\x5b\xb7\x65\x5d\xe7\xe8\x33\xd7\x6f\x8a\x56\xb8\x9b\x2b\x7d\x84\x57\xe4\x68\x0a\xd2\xa1\x73\xef\x16\xff\x01\x3d\x47\xb5\x81\xbb\xaf\x46\x11\xe4\x6c\xbf\x7a\xef\x4b\xed\x66\xfc\x66\x86\xe9\x5b\x40\xa1\x5b\xe5\x5a\x2b\x14\xfa\x66\x50\xb3\x9f\x8c\xfa\xbc\x40\x57\x75\xcc\x1a\xc6\x16\xd3\x1e\xac\xd0\x37\xdb\x52\x3d\xb8\x08\x3d\x87\x03\x97\x9e\xe8\x45\x7c\xc3\x19\x2e\x47\xf2\x7e\xf3\xfa\xc6\xd3\x18\xa1\x4a\xd1\x30\x09\x25\x2a\x32\x5a\xf0\x47\x87\xd2\x03\x6d\xe3\x88\xae\x87\x5b\xaf\x76\x5d\xea\x9b\x51\x3f\xf6\xba\x7e\x1d\x7e\xdf\xbd\x7c\xed\x4f\xa9\x89\x6b\x62\x79\xf5\x72\xf6\xce\x3f\xe6\x59\xf5\x72\xe6\xb7\x8a\x58\xd1\x7f\xe1\x27\xd3\x8d\x4f\x39\x55\xb3\x3f\x3f\x79\xf1\x97\xaf\xbe\xcd\x33\xaa\xa2\xc5\x5e\x79\xb0\xf8\x6f\x26\x5b\xdc\x59\xbb\x74\xd6\x39\xaa\x72\xfb\x22\xcf\x3a\xfc\xa1\x9d\xee\xb6\x31\xd0\xe7\x87\xa7\xed\x68\x4a\x18\xbb\xa8\x38\xa2\x88\x9f\x0a\x74\x65\xdf\x9b\x16\x1f\x0d\xf2\x83\x72\xc5\x37\x42\x39\x14\x3a\x32\xeb\xaa\xe0\x09\x91\x7b\xcd\xcf\x10\x78\xc0\x79\x5c\xdc\x3d\xc6\x43\xc3\xde\xde\xb7\x4e\x09\x7d\xfc\xb6\x76\x9a\xeb\x11\xd6\x01\x0a\x0e\x09\xef\xc5\x7a\x30\xda\xed\xcd\xe8\x94\x68\xc7\xef\x7e\xa7\x45\x1b\x61\x3d\x6a\xc3\x07\x38\xc7\x13\xe1\x47\xa5\xd3\x99\xd8\xb9\xa9\x3d\x2e\x04\x07\xf6\x59\xb8\x08\x40\xe3\x27\xe0\x0c\xba\xcf\x16\x5d\xa9\xed\xcb\xf7\xe0\xd3\x58\xb8\x60\xb9\x02\x7d\xbd\x19\x2e\x42\x91\x3e\x1f\xff\xa4\xb1\x9d\x41\xba\x4f\xf9\x77\x0b\xa5\x86\xad\x36\xdf\xe3\x1e\x20\xde\x18\x24\x5a\xf7\x1a\x5d\x00\x5e\x79\xe0\xfe\x5e\xfb\xd9\xb4\x19\xdd\x9a\x12\xfd\xbc\xb1\xed\x35\xdd\x05\x73\x70\xa1\x3d\xea\xfa\x36\x3b\x46\x7a\x70\xd5\x1d\xb5\x39\x3e\x01\xa6\x0e\x7c\x03\xf6\x16\x1b\x0d\xb7\xb7\x59\x21\x75\xd1\xcf\x7f\x03\x81\x3d\xdf\x3e\x27\x6a\x14\x43\x77\x3f\xdf\xe7\x3f\xfa\xd5\x7f\x6f\x2f\x34\x5f\xcf\xce\xf3\x2c\xfc\xbf\x80\xdf\x03\x00\x00\xff\xff\x23\x4a\xf8\xcd\x28\x20\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 8232, mode: os.FileMode(420), modTime: time.Unix(1514067709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

