// Code generated by go-bindata.
// sources:
// templates/html/spr.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlSprHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x4d\x73\xdb\x36\x10\x3d\x4b\xbf\x02\xe5\xa5\x97\x50\x98\x26\x39\xb4\x2e\xc9\x69\xc6\x89\x5b\x4f\x92\xc6\x13\x3b\xfd\x38\x75\x56\xc4\x9a\x44\x0c\x02\x08\x00\x4a\x66\x53\xff\xf7\x0e\xf8\x21\x81\x12\x25\x2b\x9d\xb6\x97\x24\x58\xbc\x7d\xfb\xb0\xd8\x05\x57\x49\xbe\x7a\xf9\xee\xfc\xe6\xf7\xab\x57\xa4\x74\x95\xc8\xe6\x89\xff\x8b\x08\x90\x45\x1a\xa1\x8c\xb2\x39\x21\x49\x89\xc0\xb2\xf9\x8c\x90\xc4\x71\x27\x30\xfb\xfc\x99\x2c\xae\xaf\xde\x2f\x7e\x86\x0a\xc9\xc3\x03\xf9\x8b\x0c\x96\x4b\xd6\xad\x7f\x2d\xd5\xd7\x96\xbc\x93\xe4\x82\x1b\xeb\x12\xda\xf9\xb5\x14\x15\x3a\x20\xa5\x73\x3a\xc6\x4f\x35\x5f\xa5\xd1\xb9\x92\x0e\xa5\x8b\x6f\x1a\x8d\x11\xc9\xbb\x55\x1a\x39\xbc\x77\xd4\x8b\xf9\x9e\xe4\x25\x18\x8b\x2e\xfd\x70\x73\x11\x7f\x1b\x05\x34\x12\x2a\x4c\x23\x83\xb7\x68\x0c\x9a\xc0\x59\x19\x5e\x70\x19\x1d\x88\xf8\x5b\xfc\xe1\x45\x7c\xae\x2a\x0d\x8e\x2f\x45\x18\xf4\xf2\x55\xfa\x5d\x44\xe8\x5e\x08\xd0\x5a\x60\x5c\xa9\x25\x17\x18\xaf\x71\x19\x83\xd6\x71\x0e\x1a\xc6\xee\x0d\xda\x93\xbd\xad\x03\x57\xdb\x78\x09\x26\xb6\xae\x19\xd1\x2c\x05\xe4\x77\x53\x44\x3f\x81\x64\x25\x0a\x76\x61\x38\x4a\x26\x9a\x30\x5d\xa6\xc6\x29\x97\x15\xc7\xb5\x56\xc6\x05\xd0\x35\x67\xae\x4c\x19\xae\x78\x8e\x71\xbb\x78\x42\xb8\xe4\x8e\x83\x88\x6d\x0e\x02\xd3\x6f\x9e\x90\x0a\xee\x79\x55\x57\x81\x81\xcb\xb1\xa1\xb6\x68\xda\x95\x4f\x42\x2a\x55\x1b\x7d\x1b\x5e\x1b\xa5\xd1\xb8\x26\x8d\xfc\x25\x9e\x09\xb0\xae\x52\x8c\xdf\x72\x64\x81\x16\x5f\x38\x6f\xc0\xba\xb7\xfd\x16\x79\x78\x18\x4e\x31\x45\xa5\x8a\x33\x37\x2e\x13\x30\x8e\xe7\x62\xe7\xe8\x23\x07\xcb\x1d\xfe\xe1\x93\x11\x78\x8d\xeb\xf3\x88\x73\x5b\xb8\x3b\x7a\xc3\xd2\xe7\x96\xc0\xa6\xfa\xaf\x04\xe4\xe8\xf5\xb5\x3b\x72\x63\x3f\x57\xb5\x74\xa6\xd9\x1e\x6d\x22\x10\x43\x9b\x1b\xae\x1d\x57\x32\xac\x47\x67\x77\x7a\x89\x5c\xbe\xf4\x41\x47\x0d\x77\x84\x96\x57\x50\x84\xfa\x69\x6b\xb0\x74\xad\x6e\x63\xfb\x29\xd6\x5c\xde\x2d\x3e\xea\xe2\xe0\xdd\xb9\x35\x77\x0e\xcd\x59\x0e\x86\x45\x64\x05\xa2\xc6\x34\xb2\x75\x55\x81\x69\x0e\x85\x1d\x7c\x7c\xe2\x83\xd0\x3f\x80\x10\xea\xd6\x95\xa8\x7d\x9a\xec\x63\xde\xb9\x41\x70\xca\xfc\x73\x82\xda\x88\xd1\xc1\x19\x3d\x29\x69\x83\xfb\xff\x73\xf3\x43\xb4\xff\xe2\xfa\x07\xee\x2f\xaa\x01\xe2\x89\x04\x97\x77\xc4\xa0\x48\xa3\xf6\x69\xb2\x25\xa2\x8b\x48\x69\xf0\x36\x8d\x68\x6e\x2d\xad\x40\xff\x89\x72\xf1\xd1\x2e\x72\x6b\xfb\x67\xb6\x3b\x00\xb1\x26\x4f\x23\xfa\x11\x56\xd0\x19\x06\x6c\xc5\x3d\x3e\xca\x12\xda\xd9\xb3\xf9\x6c\x36\x9f\x1d\x76\xb3\x82\x6b\xdd\x54\xa0\x17\xb9\x51\xd6\x96\xc0\x8d\x9d\x24\x78\x54\xec\xba\x54\x56\xc9\x5b\x9f\xbe\x85\xd5\x66\x23\xf9\x60\xe8\x5d\x87\x9d\xa8\xc4\x7f\x13\x69\xf7\x51\x24\x24\x59\x2a\xd6\x10\x06\x0e\xe2\xee\xa4\x31\x68\x7e\x87\x4d\x57\x31\x6f\x5b\xd3\x8b\xab\xcb\xd7\xd8\xf8\xab\xf2\x1e\x84\xb4\x7f\x24\x8c\xaf\x48\x2e\xc0\xda\x34\x0a\x22\x46\x84\xb3\x91\x21\x6e\xcb\x3d\xea\x42\x84\x76\x8f\xdb\x29\x84\x3d\x8c\x06\x57\x6e\x51\x57\xe0\xca\x43\x38\xe3\xbf\xc1\x21\xe5\x55\x6b\xea\x88\x3b\xd9\xbd\x66\x0f\xaa\x40\xfb\x9c\x30\xbe\xf2\x35\xd3\xed\x95\x4f\xf7\x26\x83\xc4\x56\x20\x44\x76\xb4\x57\x12\xab\x41\x66\x7b\x1d\x93\xd0\xd6\x4e\x3a\x65\xc8\xc8\xb2\xd9\x81\x0e\x02\x37\xd8\x84\x76\xe1\x12\x5a\x3e\xdd\x28\x2e\x9f\x65\xa7\xb5\xd1\x20\x16\x24\x23\xdc\x59\x5f\x52\xe0\xf8\x0a\xc9\x87\xf7\x97\x21\xb8\x4f\x62\x10\xec\xd9\x36\x07\x43\x7e\xc2\xdc\x16\xa8\xaa\x3e\xe5\x9e\xd1\xd5\x0c\xb7\x59\x7e\xd3\x5b\xb6\xd7\x22\x94\x2c\x76\x41\x83\x69\x8b\xaa\xb8\x9c\x60\x7b\xcb\xe5\x40\x38\x46\xee\x73\x7a\xe8\x04\x2d\xdc\x4f\xd1\xc2\xfd\x3e\xad\x47\x4e\xd0\xc2\xfd\x88\xd6\x7f\x56\x92\xf2\x79\xf6\x23\xaa\x0a\x9d\x69\x12\x5a\x3e\xcf\xe6\xb3\xf9\xcc\x5f\xca\x52\xd5\x92\x71\x59\x90\xa5\xba\xf7\x29\x4e\x72\xc5\xb6\xe3\xe5\xe8\x30\x4f\xc8\x01\xe1\xc1\x46\xa8\x72\x6c\x0e\xf0\x09\x6d\x83\x90\xe1\x9a\xb5\xe1\x32\xe7\x1a\x04\xc9\x51\x3a\xa3\x38\xdb\x57\x12\x5c\xd2\x96\x77\x82\x74\x31\x94\x41\xd7\x18\xdd\xe2\x58\x69\x74\x43\xe0\x26\x49\xd7\xed\x72\x93\xa2\xc4\xf9\xd1\xaa\x9f\xbc\x4d\x96\xb8\x32\xbb\x10\x50\x24\xd4\x95\xed\x62\x80\xf7\xcb\x5f\xfc\xd7\x79\xb3\x3a\xf7\x31\x18\xca\xbc\x37\x51\x67\x02\x26\x96\x9d\xd7\xc6\xb7\x4f\x42\x1d\x6b\xd7\x9b\x5e\xb0\xfd\xce\xe2\xda\x19\x2e\x0b\x1f\xb1\x3d\xe1\x41\xdc\xa5\xbd\x31\x35\x3e\x86\x79\x2d\xd5\x5a\x76\xa0\x1d\x21\x08\x16\xd9\x94\x6f\xbb\xf1\xb8\x8c\x0e\x76\x54\xc5\x00\x39\x28\xe2\x25\x6a\x83\x39\xb8\x49\x21\xdb\xcd\x47\xc5\x04\xd0\x63\x82\x46\xb0\x83\xa2\x2e\xed\x75\xad\xd1\x58\x64\x93\xb2\xb6\x9b\x8f\xca\x0a\xa0\xc7\x64\x8d\x60\x27\xc8\xe2\xb2\x38\xc2\xc2\x65\x71\xb2\x30\x8f\x3d\x45\x59\x87\x1b\x49\x9b\x91\xf6\xc7\x42\x42\xfb\x6e\x19\xb5\x60\xd0\x7c\x59\xd7\x63\x57\xdd\x7c\xc4\xb1\xef\xb3\xf9\x6c\xb2\x33\xf5\x06\xd6\x8f\x37\xc7\x41\xb1\x81\xf5\xe6\x83\x78\x02\x5c\x1b\x74\xae\x19\x3c\xfa\x03\x04\x8f\xc6\xa1\x17\x64\xf3\x52\xa8\xda\xe4\xd8\xbe\xc4\xdb\xe7\xa2\x16\x5d\x6c\xc1\xb3\x04\xfa\x09\xc8\xff\xee\xb5\x67\x94\x7a\xe4\x22\x1c\x6c\x94\x29\xe8\xee\x5c\x90\x7d\x09\x3a\xa1\x90\x25\x54\xf0\xc3\x31\x0b\xee\xca\x7a\xb9\xc8\x55\x15\x8e\x54\xb1\x27\xdf\x90\xbd\x47\xad\xc8\xc3\x03\x5d\x0a\xb5\xa4\x15\x58\x87\x86\x8e\x00\x7b\xda\xfe\x4d\xd6\xe0\x0c\x09\x6d\xd3\xb7\x9f\xff\xe0\x9f\xed\xe0\xe7\xe7\xbd\x6c\x9e\xd0\xee\xff\x4b\xfe\x0e\x00\x00\xff\xff\x00\xfd\xcf\xa6\x40\x11\x00\x00")

func templatesHtmlSprHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSprHtml,
		"templates/html/spr.html",
	)
}

func templatesHtmlSprHtml() (*asset, error) {
	bytes, err := templatesHtmlSprHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/spr.html", size: 4416, mode: os.FileMode(420), modTime: time.Unix(1513294533, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/spr.html": templatesHtmlSprHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"spr.html": &bintree{templatesHtmlSprHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
