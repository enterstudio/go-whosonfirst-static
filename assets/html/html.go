// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x8f\xdb\xb8\x11\xfe\xbc\xfb\x2b\xa6\x4a\xd0\xe4\x80\xc8\xba\xdc\x05\x45\xbb\x91\x8d\x5e\x37\x09\xba\xb8\xa4\xb7\xc8\x4b\xaf\xfd\x74\xa0\xc4\xb1\xc5\x0b\x45\xea\xc8\x91\xbd\x6e\xba\xff\xbd\x20\x29\xd9\x94\x2d\xef\x8b\x93\xe6\x02\x24\x6b\x51\x33\xcf\xcc\x3c\x1c\xce\x0c\xbd\xc9\xff\xf0\xe2\xa7\xf3\xf7\xff\xbe\x7c\x09\x15\xd5\x72\x76\x9a\xbb\x1f\x20\x99\x5a\x4c\x13\x54\xc9\xec\x14\x20\xaf\x90\xf1\xd9\xe9\x09\x40\x4e\x82\x24\xce\x3e\x7d\x82\xc9\xbb\xcb\xb7\x93\x7f\xb0\x1a\xe1\xfa\x1a\xfe\x0b\xfd\xca\x05\x0f\xcf\x3f\x57\xfa\x91\x85\x9f\x14\xbc\x12\xc6\x52\x9e\x05\x3d\x0f\x51\x23\x31\xa8\x88\x9a\x14\x7f\x6b\xc5\x72\x9a\x9c\x6b\x45\xa8\x28\x7d\xbf\x6e\x30\x81\x32\x3c\x4d\x13\xc2\x2b\xca\x9c\x33\xcf\xa1\xac\x98\xb1\x48\xd3\x0f\xef\x5f\xa5\x7f\x4e\x22\x18\xc5\x6a\x9c\x26\x06\xe7\x68\x0c\x9a\x48\x59\x1b\xb1\x10\x2a\x39\x60\xf1\x5f\xe9\x87\x1f\xd2\x73\x5d\x37\x8c\x44\x21\x63\xa3\x17\x2f\xa7\x7f\x49\x20\xdb\x33\xc1\x9a\x46\x62\x5a\xeb\x42\x48\x4c\x57\x58\xa4\xac\x69\xd2\x92\x35\x6c\xa8\xbe\x46\x7b\x67\x6d\x4b\x8c\x5a\x9b\x16\xcc\xa4\x96\xd6\x03\x98\x42\xb2\xf2\xe3\x18\xd0\xdf\x99\xe2\x15\x4a\xfe\xca\x08\x54\x5c\xae\x63\xba\x4c\x8b\x63\x2a\x4b\x81\xab\x46\x1b\x8a\x44\x57\x82\x53\x35\xe5\xb8\x14\x25\xa6\xfe\xe1\x09\x08\x25\x48\x30\x99\xda\x92\x49\x9c\x3e\x7d\x02\x35\xbb\x12\x75\x5b\x47\x0b\x42\x0d\x17\x5a\x8b\xc6\x3f\x39\x12\xa6\x4a\x7b\xeb\x5b\xf3\x8d\xd1\x0d\x1a\x5a\x4f\x13\xb7\x89\x67\x92\x59\xaa\x35\x17\x73\x81\x3c\xf2\xc5\x25\xce\x6b\x66\xe9\x4d\xf7\x0a\xae\xaf\xfb\x28\xc6\xa0\xf4\xe2\x8c\x86\x69\xc2\x0c\x89\x52\xee\x84\x3e\x50\xb0\x82\xf0\x17\x47\x46\xa4\x35\xcc\xcf\x1b\x94\x7d\xe2\xee\xf8\x1b\xa7\xbe\xb0\xc0\x36\xd9\x7f\x29\x59\x89\xce\x3f\xff\x46\x6d\xd6\xcf\x75\xab\xc8\xac\xb7\xa1\x8d\x18\xe2\x68\x4b\x23\x1a\x12\x5a\xc5\xf9\x48\x76\xe7\x2c\xc1\xc5\x0b\x67\x74\x70\xe0\x6e\x80\x15\x35\x5b\xc4\xfe\x67\x82\x67\x03\xdd\x89\x5d\x2e\x0e\xee\x1c\xad\x04\x11\x9a\xb3\x92\x19\x9e\xc0\x92\xc9\x16\xa7\x89\x6d\xeb\x9a\x99\xf5\x21\xa3\xbd\x8e\xa3\x3d\x32\xfc\x57\x26\xa5\x9e\x53\x85\x8d\x23\xc9\xde\xa6\x5d\x1a\x64\xa4\xcd\xf1\x00\xad\x91\x37\x85\x7d\x9b\xfa\xd7\xd9\xf7\xde\xda\xff\x63\xf3\x7b\xec\x7b\x64\x00\x38\x18\x29\xd4\x47\x30\x28\xa7\x89\x2f\x4b\xb6\x42\xa4\x04\x2a\x83\xf3\x69\x92\x95\xd6\x66\x35\x6b\xfe\x83\x6a\xf2\xab\x9d\x94\xd6\x76\x25\x36\xb8\x0f\xd6\x94\xd3\x24\xfb\x95\x2d\x59\x58\xe8\x65\x6b\xe1\xe4\x93\x59\x9e\x85\x75\x9f\x6d\x07\x95\xa4\x2e\x99\x9c\x6b\xc3\x16\xb8\xaf\x19\x0a\xc3\x41\x5d\x2b\x45\xd3\xac\x6b\xd6\x4c\x4a\xa3\xad\xad\x98\x30\xf6\x1e\xa6\x57\x95\xb6\x5a\xcd\x1d\xd7\x93\x92\x95\x15\xee\x1a\xbf\xab\x72\x6b\xc4\x8e\xd9\x3b\x2a\x2a\xa4\x23\x15\x59\x2d\xe6\xeb\xa1\x2e\x9c\xc0\x09\xf8\x7d\xbd\x7d\x5b\x63\xac\xd5\x6a\xd5\x6d\xee\xbd\x55\x4b\x5d\xd7\x5a\x05\x6d\x4f\xd7\xe9\x7d\x11\x5c\x63\x14\xe5\x44\xf0\x4d\x7e\xdd\x29\xfe\xad\xda\xc1\xed\x76\x47\xb4\x1b\x2c\xb6\x20\x21\x83\x61\x25\x14\xd7\xab\x09\xe3\xfc\xe5\x12\x15\xbd\x16\x96\x50\xa1\x79\x9c\x48\xcd\x78\xf2\x04\xe6\xad\x2a\xdd\xf9\x04\xf7\xfc\x18\x9d\xcc\x37\x9f\xbc\xe6\xc9\xb8\x17\xae\xa3\x3e\xfe\xe6\xb9\x17\xb9\xf6\x3f\xb7\x3e\x01\xe4\x59\x18\xaa\x00\xf2\x42\xf3\x35\x70\x46\x2c\x0d\xa7\x25\x65\x8d\xf8\x88\xeb\x50\x73\xde\xf8\xa5\x1f\x2e\x2f\x7e\xc4\xb5\x3b\xec\x4e\x03\xc0\xff\x93\x73\xb1\x84\x52\x32\x6b\xa7\x49\xe4\x42\x02\x82\x0f\x16\x52\x5f\x30\x93\x60\x22\x5e\x77\x72\x3b\xa5\x64\x4f\xa6\x61\x54\x6d\xa5\x2e\x19\x55\x87\xe4\x8c\x9b\xe1\x62\xc8\x4b\xbf\x14\x03\x4b\x46\x82\x5a\x8e\x5b\x99\xd7\xdd\x4a\x24\xa3\xd5\x62\x57\xa8\x5f\xda\x4a\xd5\x42\x8d\xa0\xbd\x11\xaa\x07\x1c\x4a\xee\x63\x3a\xd1\x11\x58\x76\x35\x06\xcb\xae\xf6\x61\x9d\xe4\x08\x2c\xbb\x1a\xc0\x86\xed\xea\xf6\xca\x91\x53\xb3\xc6\x25\x27\x17\x4b\x57\x6f\xc3\xbb\xea\xbb\xd9\xe9\x49\x6e\x1b\xa6\x46\xb6\x33\xf5\x93\x8b\xcf\xd1\x9d\x1e\x94\x67\x4e\x65\x06\x41\x73\x74\xd3\x53\xce\x08\xc3\x69\xf0\xa2\xbe\x6b\x1d\xb4\xd4\xf4\x6d\x2c\x99\x8d\x75\xb6\x0d\x88\x1a\x42\x6c\xa5\x37\xfd\xce\x17\xe9\x4e\x7e\x72\xea\x82\xab\x99\x94\x7d\x10\x62\x0e\xf8\x5b\x97\x76\xf6\xbc\x35\x2e\x4d\x26\xef\xc8\x08\xb5\x78\x25\xd9\x02\x92\xa7\x09\x5c\x5f\x87\xbe\x72\xc0\xd5\x6e\x78\x2e\x83\x72\x32\xfb\x19\xa1\x40\x29\x70\x89\x40\x95\xb0\x60\xb0\xd4\x86\x03\x69\x28\x10\x3a\xa9\x49\xe7\x50\xe7\x05\x4a\x8b\xb7\xbb\xf2\xed\x5d\x5d\x51\x9a\x06\xee\x28\x0d\x2e\x3f\xd0\x1c\xe7\x58\x30\xea\x9e\x94\x3b\x40\x3d\xa1\x9e\xc6\x93\x3e\x71\x32\x97\x39\xdd\xc3\xc9\x26\xc5\x62\xe7\x38\x12\x13\xd2\x26\xa3\xd4\xbf\xc0\xc6\x60\xc9\x08\xf9\x71\xec\xf3\x8d\x7e\x32\x7b\x1f\x05\x57\x31\x0b\x05\xa2\x82\x9a\x99\x8f\xc8\x81\x59\xd8\x8a\xee\x06\xeb\xc3\x3b\x3d\x19\xf3\xef\x5d\xdb\xa0\xb1\xc8\x0f\xf9\xe7\xfe\x8e\xda\xb5\x1b\x45\x28\xd6\x40\x15\xc2\x5c\x4b\xa9\x57\x42\x2d\x3a\x59\x7b\xe6\xeb\x32\xe4\xad\x1c\x3d\x09\x5a\x28\x42\xd3\xf1\xe6\xfe\x7c\xfa\x04\x86\xa9\x05\xc2\x43\xf1\x04\x1e\x5a\x38\x9b\x06\x2f\xb7\x3e\xfe\x6d\xdd\xb9\xe5\x71\xa5\x98\xe5\xac\xef\x70\x61\xe2\x7a\x68\x7d\xa1\x19\x31\x27\x38\xec\x9c\x78\x31\x5f\x1f\x2e\xd8\x01\x68\xd6\x7f\xca\x33\x36\xcb\x33\x29\x62\x5f\x7b\x5a\x43\x9a\xb4\xb2\x7b\x37\x09\x3f\x86\xdc\x3b\xf2\x0f\x51\x2f\xd4\x62\x8c\xfb\x00\x13\x73\xbf\xa1\xdc\xde\xc0\xf7\x9d\xd8\xbe\x95\x69\xdb\xa7\xe7\xef\xc5\xf1\x80\xdf\x0d\xbb\x93\x90\x92\xd1\xcb\xae\xcc\x6f\x8e\x6b\x2b\xf7\xce\x67\xc1\xac\x28\x7d\xe0\x2e\x9a\x83\x03\xff\xc1\x93\x28\xf8\xb6\xfa\xfa\x4e\xdb\x17\x69\xa6\x38\x08\x72\xdb\xe3\xfa\xd9\x12\xe1\xc3\xdb\x0b\x8f\xd4\x13\x56\x11\x35\xf6\x2c\xcb\x1c\x01\x93\x78\x82\xd1\x66\x91\xed\xf5\xfb\x11\xd3\x06\xa5\x1b\x0e\xa2\x5e\x11\x84\x1d\x55\x93\xc0\xd5\x6e\x5e\x6d\x26\x82\x24\x7d\x16\x12\xc9\x45\x1d\xa5\xd1\x23\x0b\x61\x90\xe8\xe3\x2e\x35\xc7\x59\xfa\x2c\xcf\xfc\x07\x58\x55\xa2\xac\x40\x28\x2e\x5c\x2d\xb1\x20\xc8\x1f\xfa\xba\x95\x24\x1a\x89\x9d\xb2\xab\x02\x25\x6b\x2d\xee\x47\xbb\x10\x54\xb5\x85\x1b\x52\xe3\xd9\x31\x1b\x64\x63\xb8\x41\x09\xb4\x19\x19\xc4\xac\x66\x96\xd0\x64\xd1\xf2\x4a\xcf\x1f\x04\x4b\xbf\x38\xfe\xbd\x13\x4d\x83\xca\x82\xd5\x35\x92\xa8\xd1\x46\x24\x9c\x8c\xf4\x9a\x88\x88\xef\xef\x43\xc4\xf7\x43\x22\x6a\x64\xca\x93\x50\x8b\x45\x45\x20\x71\x21\x48\xd4\x8c\x50\xae\xa1\x62\x4b\xdc\x27\xe6\xab\x10\xd2\xb3\xdf\xa0\x76\xb6\x99\x59\xb4\x08\xac\xd0\x2d\x85\x1e\x68\xb5\x21\xd0\x73\xf7\xa0\x16\x77\x67\xea\xbb\xfb\x30\xf5\x74\x8c\xa9\x15\x7a\x5a\xd4\x23\x82\x42\x53\x85\x06\x39\x90\x59\xbb\x32\x45\x1a\x1a\xa1\x80\xeb\x95\x8a\x1b\xf5\x23\x0b\xa2\xae\x91\x0b\x46\x3d\x89\x5f\x37\xb9\xa4\x98\xa3\x0b\xab\xd4\x75\x23\x7d\xd6\xf3\xa8\x16\xdd\x4c\xd8\xd3\xdb\x09\xbb\xd8\x27\xcc\x51\xe5\x18\x59\xb9\x9d\xfb\x4a\x51\xb6\xaa\x44\x43\x4c\x28\x17\x5b\xb7\x65\x5d\x63\xe9\x33\xd7\x6f\x8a\x56\xb8\x9b\x2b\x7d\x84\x17\xe4\x68\x0a\xd2\xa1\xef\xef\xf6\x86\x01\x3d\x5f\xa6\x4b\xec\x42\xce\xf6\xab\xf7\xbe\xd4\x6e\xc6\x6f\x26\xa0\xbe\x05\x14\xba\x55\xae\xf3\x42\xa1\xaf\x06\x35\xfb\xc1\xa8\xcf\x0b\x74\x55\xc7\xac\x61\x6c\x31\xed\xc1\x0a\x7d\xb5\x2d\xd5\x83\x8b\xd2\x13\x38\x70\x29\x8a\x5e\xc4\x37\xa0\xe1\x72\x24\xef\x37\xaf\x6f\x3c\x8d\x11\xaa\x14\x0d\x93\x50\xa2\x22\xa3\x05\xff\xec\x50\x7a\xa0\x6d\x1c\xd1\xf5\x71\xeb\xd5\xae\x4b\x7d\x33\xea\x87\x66\xd7\xaf\xc3\xe7\xdd\xcb\xd9\xfe\x8c\x9b\xb8\x26\x96\x57\xcf\x66\xef\xfc\x63\x9e\x55\xcf\x66\x7e\xab\x88\x15\xfd\x2f\x34\xc8\x74\xd3\x55\x4e\xd5\xec\x8f\x0f\x9e\xfe\xe9\xdb\xe7\x79\x46\x55\xb4\xd8\x2b\x0f\x16\xff\xc9\x64\x8b\x3b\x6b\xe7\xce\x3a\x47\x55\x6e\x5f\xe4\x59\x87\x3f\xb4\xd3\xdd\x55\x06\xfa\xfc\xf0\xac\x1e\x4d\x09\x63\xd7\x1c\x47\x14\xf1\x63\x81\x2e\xec\x7b\xd3\xe2\x67\x83\xfc\xa8\x5c\xf1\x8d\x50\x0e\x85\x8e\xcc\xba\x2a\x78\x44\xe4\x5e\xf3\x0b\x04\x1e\x70\x3e\x2f\xee\x1e\xe3\xae\x61\x6f\x6f\x6b\xc7\x84\x3e\x7e\xd7\x3b\xce\xf5\x08\xeb\x00\x05\x87\x84\xf7\x62\x3d\x18\xed\xf6\x5e\x75\x4c\xb4\xe3\x37\xc7\xe3\xa2\x8d\xb0\x3e\x6b\xc3\x07\x38\xf7\x27\xc2\x8f\x4a\xc7\x33\xb1\x73\x91\xfb\xbc\x10\x1c\xd8\x17\xe1\x22\x00\x8d\x9f\x80\x13\xe8\xbe\xf4\xe8\x4a\x6d\x5f\xbe\x07\x5f\x9d\x85\x0b\x96\x2b\xd0\x97\x9b\xe1\x22\x14\xe9\xd3\xf1\x2f\x44\xb6\x33\x48\xf7\x9b\x8b\x9b\x85\x52\xc3\x56\x9b\xef\xeb\xee\x20\xde\x18\x24\x5a\xf7\x1a\x5d\x00\x5e\x79\xe0\xfe\x5e\xfb\xd9\xb4\x19\xdd\x9a\x12\xfd\xbc\xb1\xed\x35\xdd\x05\x73\x70\xdf\xbd\xd7\xf5\x6d\x76\x1f\xe9\xc1\x55\x77\xd4\xe6\xf8\x04\x98\x3a\xf0\x0d\xd8\x5b\x6c\x34\x5c\x5f\x67\x85\xd4\x45\x3f\xff\x0d\x04\xf6\x7c\xfb\x92\xa8\x51\x0c\xdd\xfd\x7c\x9f\xff\xe8\xa3\xff\x3e\xbe\xd0\x7c\x3d\x3b\xcd\xb3\xf0\xdf\x20\xfe\x17\x00\x00\xff\xff\xd1\x33\x22\x4b\x17\x21\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 8471, mode: os.FileMode(420), modTime: time.Unix(1514071268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

