// Code generated by go-bindata.
// sources:
// templates/html/spr.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlSprHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xdf\x93\xdb\x34\x10\x7e\x4e\xfe\x0a\xe1\x17\x5e\xea\x68\x68\x3b\x03\x14\xd9\x03\x73\xed\xc1\x0d\x3f\x7a\xb4\x57\xa0\x4f\xcc\xc6\xde\xb3\x75\x27\x4b\xaa\x24\x27\x17\xca\xfd\xef\x8c\x2c\x3b\x91\x93\x38\x77\x30\xe5\xa5\xcd\xae\xbe\xfd\xf6\xd3\x4a\x6b\x6d\xcb\x3e\x7b\xf9\xfa\xec\xea\xfd\xe5\x2b\x52\xbb\x46\xe4\x73\xe6\xff\x22\x02\x64\x95\x25\x28\x93\x7c\x4e\x08\xab\x11\xca\x7c\x3e\x23\x84\x39\xee\x04\xe6\x1f\x3f\x92\xc5\x2f\xd0\x20\xb9\xbf\x27\x7f\x13\x6f\x5d\x94\xe1\xf7\xef\xb5\xfa\xdc\x92\xd7\x92\x9c\x73\x63\x1d\xa3\x01\xdf\x85\x36\xe8\x80\xd4\xce\xe9\x14\x3f\xb4\x7c\x95\x25\x67\x4a\x3a\x94\x2e\xbd\xda\x68\x4c\x48\x11\xac\x2c\x71\x78\xe7\xa8\x17\xf1\x0d\x29\x6a\x30\x16\x5d\xf6\xee\xea\x3c\xfd\x2a\x89\x68\x24\x34\x98\x25\x06\xaf\xd1\x18\x34\x51\xb0\x32\xbc\xe2\x32\x99\xc8\xf8\x47\xfa\xee\xbb\xf4\x4c\x35\x1a\x1c\x5f\x8a\x38\xe9\xc5\xab\xec\xeb\x84\xd0\x83\x14\xa0\xb5\xc0\xb4\x51\x4b\x2e\x30\x5d\xe3\x32\x05\xad\xd3\x02\x34\x8c\xc3\x37\x68\x1f\x1d\x6d\x1d\xb8\xd6\xa6\x4b\x30\xa9\x75\x9b\x11\xcd\x52\x40\x71\x7b\x8c\xe8\x07\x90\x65\x8d\xa2\x3c\x37\x1c\x65\x29\x36\x71\xb9\x4c\x8b\xc7\x42\x56\x1c\xd7\x5a\x19\x17\x41\xd7\xbc\x74\x75\x56\xe2\x8a\x17\x98\x76\xc6\x13\xc2\x25\x77\x1c\x44\x6a\x0b\x10\x98\x7d\xf1\x84\x34\x70\xc7\x9b\xb6\x89\x1c\x5c\x8e\x1d\xad\x45\xd3\x59\xbe\x08\x99\x54\x5d\xf6\x5d\x7a\x6d\x94\x46\xe3\x36\x59\xa2\xaa\x17\x6e\x7c\xb6\x60\x1c\x2f\xc4\x9e\xde\x51\x80\xe5\x0e\xff\xf4\x3b\x88\xa2\xc6\x97\xea\x44\x70\x77\xdb\xa2\xc0\xf8\x9e\x72\x4b\xa0\xbb\xaa\x97\x02\x0a\xf4\xba\x3a\xaf\xec\x7c\x67\xaa\x95\xce\x6c\xee\xef\x4f\x90\x97\x68\x0b\xc3\xb5\xe3\x4a\xc6\x17\xc7\xd9\xbd\x4b\x4f\x2e\x5e\xfa\x64\xdb\xae\x38\x41\xc9\x1b\xa8\x62\xbd\xb4\x73\x58\xba\x56\xd7\xa9\xfd\x90\x6a\x2e\x6f\x17\x37\xba\x9a\x2c\xb0\x5b\x73\xe7\xd0\xbc\x28\xc0\x94\x09\x59\x81\x68\x31\x4b\x6c\xdb\x34\x60\x36\x53\x69\x87\x18\x5f\xe8\x28\xf5\xb7\x20\x84\xba\x76\x35\x6a\x5f\x1e\xfb\x50\x74\x61\x10\x9c\x32\xff\x9d\xa0\x35\x62\xb4\xf1\x92\x3e\x58\xb0\x21\xf4\xff\x3b\xe5\x21\xc3\xa7\x3e\xea\x81\xf7\x5f\x9d\x37\xf1\x44\x82\xcb\x5b\x62\x50\x64\x49\xf7\xad\xb0\x35\xa2\x4b\x48\x6d\xf0\x3a\x4b\x68\x61\x2d\x6d\x40\xff\x85\x72\x71\x63\x17\x85\xb5\xfd\x77\x2f\x88\x27\xd6\x14\x59\x42\x6f\x60\x05\xc1\x31\x60\x1b\xee\xf1\x49\xce\x68\xf0\xe7\xf3\xd9\x6c\x3e\x9b\x0e\xb3\x82\x6b\xbd\x69\x40\x2f\x0a\xa3\xac\xad\x81\x1b\x7b\x94\xe0\x41\xb1\xeb\x5a\x59\x25\xaf\x7d\xe9\x16\x56\x9b\xad\xe4\xc9\xd4\xfb\x01\x7b\x59\x89\x7f\x9c\x68\x78\x9d\x08\x61\x4b\x55\x6e\x48\x09\x0e\xd2\xb0\xd3\x14\x34\xbf\xc5\x4d\x96\xf4\x26\xbf\x7d\xbf\x7a\xf5\xeb\x97\xdd\x9b\x46\x48\xf7\x07\x2b\xf9\x8a\x14\x02\xac\xcd\x92\x28\x59\x42\x78\x39\x72\xa4\xdd\xad\x4e\x02\x7b\xec\xf7\xb8\xe8\xfc\x0f\xd6\x35\xb8\x3a\x20\x2e\xc1\xd5\x53\x18\xe3\xdf\xc1\x81\xea\xb2\x33\x03\x61\x90\xda\xeb\xf4\x80\x06\xb4\x2f\x41\xc9\x57\xfe\x8a\x84\xb5\xfa\xe9\xe8\x45\x66\xb6\x01\x21\xf2\xc9\x56\x60\x56\x83\xcc\x47\x0d\xc1\x68\xe7\x23\x41\x09\x96\x64\xb9\x89\x60\x83\xa0\x2d\x8e\xd1\x90\x82\xd1\xfa\xe9\x56\x61\xfd\x2c\x7f\xb8\x43\x06\x71\x20\x4b\xc2\x9d\xf5\xb7\x05\x1c\x5f\x21\x79\xf7\xe6\x62\x00\xf6\x85\x8a\x92\x3c\xdb\xed\x75\xa8\x43\x5c\xbf\x0a\x55\xd3\x97\xd5\xb3\xb9\xb6\xc4\x50\xc9\x9f\x7a\x6b\x57\x76\xa1\x64\x15\x03\x06\x73\x87\x68\xb8\xdc\x63\xf9\x99\xcb\x81\x68\x8c\x1a\x73\x79\xd8\x11\x3a\xb8\xdb\xa7\x83\xbb\x43\x3a\x8f\xda\xa3\x83\xbb\x11\x9d\x7f\x01\x58\xfd\x3c\xff\x1e\x55\x83\xce\x6c\x18\xad\x9f\xe7\xf3\xd9\x7c\xe6\x8b\xbe\x54\xad\x2c\xb9\xac\xc8\x52\xdd\xf9\x32\xb2\x42\x95\x61\x4c\x1b\x89\x7f\x42\x8e\x08\xed\x9d\xb1\xaa\x9d\x2b\xc2\x31\xda\x91\x92\xe1\xe8\xb4\xe1\xb2\xe0\x1a\x04\x29\x50\x3a\xa3\x78\x39\xce\x1c\x15\x3f\xf0\x1d\x21\x5b\x0c\xc7\x1a\x2e\x74\x30\x4e\x1d\x75\x18\x9e\xb6\xc5\x78\xdb\x99\xdb\x52\x30\xe7\x47\x92\x7e\x52\x35\x39\x73\x75\x7e\x2e\xa0\x62\xd4\xd5\x9d\x31\xc0\x7b\xf3\x37\xff\x60\x6e\xad\x33\x9f\xa3\x44\x59\xf4\x2e\xea\x4c\xc4\x54\xe6\x67\xad\xf1\x6d\xc0\xa8\x2b\x3b\xbb\xbb\xd3\xb6\xf7\x2e\xde\x3a\xc3\x65\xe5\xb3\x75\xbb\x3b\x8a\xb9\xb0\x57\xa6\xc5\x53\xeb\x3f\x4a\xb5\x96\x01\xb0\x97\x1c\xc1\x62\xb9\x1f\xd7\x39\x4f\xa7\x0e\x90\xc9\xcc\xc3\xf2\x64\xe2\x97\xa8\x0d\x16\xe0\x0e\x92\xef\x16\x4e\x0a\x88\x60\x53\x22\x46\x90\x49\x21\x17\xf6\x6d\xab\xd1\x58\x2c\x0f\xa4\xec\x16\x4e\x4a\x89\x60\x53\x52\x46\x90\x47\x48\xe1\xb2\x9a\x60\xe0\xb2\x7a\x94\x18\x8f\x7b\x48\x4d\xc0\x8c\xe4\xcc\xfc\x74\x30\x9f\x31\xda\xdf\xf8\x51\x1b\x45\x0d\x94\x87\x3e\xb9\x0c\xa3\x08\xc7\xbe\x57\xe6\xb3\xa3\xdd\xa5\xb7\xb0\x7e\x92\x38\x0d\x4a\x0d\xac\xb7\x8f\xd1\x23\xe0\xda\xa0\x73\x9b\x21\xa2\xdf\x40\xd4\xf8\x53\x5f\x81\x6d\xb7\xab\xd6\x14\xd8\x7d\x31\x77\x2d\xdf\x8a\x90\x5b\xf0\x9c\x41\x3f\x6c\xf8\x7f\xf3\xd9\x17\x94\x7a\xe4\x22\x9e\x21\x94\xa9\x68\xfc\x16\xe7\x8f\x45\x32\x0a\x39\xa3\x82\x4f\xe7\xaa\xb8\xab\xdb\xe5\xa2\x50\x4d\x3c\xb5\xa4\x9e\xb8\x23\x7a\x83\x5a\x91\xfb\x7b\xba\x14\x6a\x49\x1b\xb0\x0e\x0d\xdd\x2e\x1e\xe8\xf9\x14\x6c\x91\x66\x46\xbb\x32\x1d\xd6\x39\xfa\xd9\xcd\x52\x7e\x84\xca\xe7\x8c\x86\xff\x0b\xf8\x27\x00\x00\xff\xff\x93\x54\x51\xdd\x1c\x10\x00\x00")

func templatesHtmlSprHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSprHtml,
		"templates/html/spr.html",
	)
}

func templatesHtmlSprHtml() (*asset, error) {
	bytes, err := templatesHtmlSprHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/spr.html", size: 4124, mode: os.FileMode(420), modTime: time.Unix(1513184167, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/spr.html": templatesHtmlSprHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"spr.html": &bintree{templatesHtmlSprHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
