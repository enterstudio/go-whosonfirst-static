// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6f\x73\xdb\xb8\xd1\x7f\x6d\x7f\x8a\x3d\x26\xf3\x24\x37\x13\x8a\xc9\x25\x4f\xa7\x75\x28\x4d\xaf\x4e\x32\xf5\x5c\xd2\xf3\xe4\x4f\xaf\x7d\x75\x03\x12\x2b\x11\x17\x10\xe0\x01\xa0\x64\x36\xf5\x77\xef\x00\x20\x29\x90\xa2\x6c\x4b\x71\xd3\xcc\x24\x16\xc1\xdd\xdf\xee\xfe\xb0\xd8\x5d\xc8\x49\xbf\x7b\xf5\xf3\xf9\xc7\x7f\x5e\xbe\x86\xc2\x94\x7c\x71\x9a\xda\x1f\xc0\x89\x58\xcd\x23\x14\xd1\xe2\x14\x20\x2d\x90\xd0\xc5\xe9\x09\x40\x6a\x98\xe1\xb8\xf8\xf2\x05\x66\x1f\x2e\xdf\xcf\xfe\x46\x4a\x84\xeb\x6b\xf8\x37\x74\x2b\x17\xd4\x3f\xff\x52\xc8\x47\x1a\x7e\x16\xf0\x86\x29\x6d\xd2\xc4\xeb\x39\x88\x12\x0d\x81\xc2\x98\x2a\xc6\xdf\x6b\xb6\x9e\x47\xe7\x52\x18\x14\x26\xfe\xd8\x54\x18\x41\xee\x9f\xe6\x91\xc1\x2b\x93\x58\x67\x5e\x42\x5e\x10\xa5\xd1\xcc\x3f\x7d\x7c\x13\xff\x31\x0a\x60\x04\x29\x71\x1e\x29\x5c\xa2\x52\xa8\x02\x65\xa9\xd8\x8a\x89\x68\x8f\xc5\x7f\xc4\x9f\x7e\x8c\xcf\x65\x59\x11\xc3\x32\x1e\x1a\xbd\x78\x3d\xff\x53\x04\xc9\x8e\x09\x52\x55\x1c\xe3\x52\x66\x8c\x63\xbc\xc1\x2c\x26\x55\x15\xe7\xa4\x22\x43\xf5\x06\xf5\x9d\xb5\xb5\x21\xa6\xd6\x71\x46\x54\xac\x4d\x33\x80\xc9\x38\xc9\x3f\x4f\x01\xfd\x95\x08\x5a\x20\xa7\x6f\x14\x43\x41\x79\x13\xd2\xa5\x6a\x9c\x52\x59\x33\xdc\x54\x52\x99\x40\x74\xc3\xa8\x29\xe6\x14\xd7\x2c\xc7\xd8\x3d\x3c\x01\x26\x98\x61\x84\xc7\x3a\x27\x1c\xe7\xcf\x9e\x40\x49\xae\x58\x59\x97\xc1\x02\x13\xc3\x85\x5a\xa3\x72\x4f\x96\x84\xb9\x90\xce\xfa\xd6\x7c\xa5\x64\x85\xca\x34\xf3\xc8\x6e\xe2\x19\x27\xda\x94\x92\xb2\x25\x43\x1a\xf8\x62\x13\xe7\x2d\xd1\xe6\x5d\xfb\x0a\xae\xaf\xbb\x28\xa6\xa0\xe4\xea\xcc\x0c\xd3\x84\x28\xc3\x72\x3e\x0a\x7d\xa0\xa0\x99\xc1\x5f\x2d\x19\x81\xd6\x30\x3f\x6f\x50\x76\x89\x3b\xf2\x37\x4c\x7d\xa6\x81\xf4\xd9\x7f\xc9\x49\x8e\xd6\x3f\xf7\x46\xf4\xeb\xe7\xb2\x16\x46\x35\xdb\xd0\x26\x0c\x51\xd4\xb9\x62\x95\x61\x52\x84\xf9\x68\xf4\xe8\x2c\xc1\xc5\x2b\x6b\x74\x70\xe0\x6e\x80\x65\x25\x59\x85\xfe\x27\x8c\x26\x03\xdd\x99\x5e\xaf\xf6\xee\x9c\xd9\x30\x63\x50\x9d\xe5\x44\xd1\x08\xd6\x84\xd7\x38\x8f\x74\x5d\x96\x44\x35\xfb\x8c\x76\x3a\x96\xf6\xc0\xf0\x9f\x09\xe7\x72\x69\x0a\xac\x2c\x49\xfa\x36\xed\x5c\x21\x31\x52\x1d\x0f\x50\x2b\x7e\x53\xd8\xb7\xa9\x7f\x9b\x7d\xef\xac\xfd\x37\x36\xbf\xc3\x3e\x20\x03\xc0\xc2\x70\x26\x3e\x83\x42\x3e\x8f\x5c\x59\xd2\x05\xa2\x89\xa0\x50\xb8\x9c\x47\x49\xae\x75\x52\x92\xea\x5f\x28\x66\xbf\xe9\x59\xae\x75\x5b\x62\xbd\xfb\xa0\x55\x3e\x8f\x92\xdf\xc8\x9a\xf8\x85\x4e\xb6\x64\x56\x3e\x5a\xa4\x89\x5f\x77\xd9\xb6\x57\x89\xcb\x9c\xf0\xa5\x54\x64\x85\xbb\x9a\xbe\x30\xec\xd5\xd5\x9c\x55\x55\x53\x92\x6a\x96\x2b\xa9\x75\x41\x98\xd2\x07\x98\xde\x14\x52\x4b\xb1\xb4\x5c\xcf\x36\x9b\xcd\xd8\xf4\x5d\x55\x15\x0a\x8a\x6a\x64\xf7\x8e\xba\xed\x0e\x32\x1c\xfb\x7d\x77\xf3\x39\xc9\x0b\x3c\xd6\xf7\x5a\xb1\xe3\x1c\x17\x68\x8e\x54\x24\x25\x5b\x36\x43\x5d\x38\x81\x13\x70\x19\x79\x7b\x42\x8e\x37\xcd\xa7\xe5\xc1\xaa\xb9\x2c\x4b\x29\xbc\xb6\xa3\xeb\xf4\x50\x04\xdb\xd2\x59\x3e\x63\xb4\x3f\x19\x77\x8a\x7f\xab\xb6\x37\x51\x6d\x71\x69\x47\xa2\x2d\x88\x3f\x7b\xb0\x61\x82\xca\xcd\x8c\x50\xfa\x7a\x8d\xc2\xbc\x65\xda\xa0\x40\xf5\x38\xe2\x92\xd0\xe8\x09\x2c\x6b\x91\xdb\xca\x02\xf6\xf9\x31\x5a\x99\xef\xbf\x38\xcd\x93\x69\x2f\xec\x2c\xf0\xf8\xfb\x97\x4e\xe4\xda\xfd\xdc\xfa\x04\x90\x26\x7e\x1c\x04\x48\x33\x49\x1b\xa0\xc4\x90\xd8\x9f\xf3\x98\x54\xec\x33\x36\xbe\x5a\xbe\x73\x4b\x3f\x5e\x5e\xfc\x84\x8d\x2d\x53\x56\x03\xc0\xfd\x93\x52\xb6\x86\x9c\x13\xad\xe7\x51\xe0\x42\x04\x8c\x0e\x16\x62\x57\xea\x23\x6f\x22\x5c\xb7\x72\xa3\x22\xb8\x23\x53\x11\x53\x6c\xa5\x2e\x89\x29\xf6\xc9\x29\x3b\x7d\x86\x90\x97\x6e\x29\x04\xe6\xc4\x30\x53\x53\xdc\xca\xbc\x6d\x57\x02\x19\x29\x56\x63\xa1\x6e\x69\x2b\x55\x32\x31\x81\xf6\x8e\x89\x0e\x70\x28\xb9\x8b\x69\x45\x27\x60\xc9\xd5\x14\x2c\xb9\xda\x85\xb5\x92\x13\xb0\xe4\x6a\x00\x6b\xdb\x01\xf4\x9b\x65\xd9\x29\x49\x65\x33\x2e\xfd\x2e\x8e\x21\x65\xe5\xaa\x4d\xea\xe9\x76\x52\x20\x5b\x15\x66\x1e\x3d\xff\xff\xa7\xb6\xb7\x40\x1c\x2f\x3a\xbc\x84\xb2\x75\xf7\xd0\xad\x15\x3f\x58\x64\x5d\x11\x31\x91\x17\xb1\x1b\xde\x5c\xb2\x8f\xda\x70\x9a\x58\x95\x05\x78\xcd\xc9\xec\x89\x29\x31\xe8\x8f\x95\x13\x75\x8d\x7b\xaf\xa5\xaa\xeb\xe4\xd1\x62\xaa\xb9\xf7\x20\x62\x08\xb1\x95\xee\x5b\xbe\xeb\x53\xad\xfc\xec\xd4\x06\x57\x12\xce\xbb\x20\xd8\x12\xf0\xf7\x96\x34\x7d\x5e\x2b\x9b\x6f\xb3\x0f\x46\x31\xb1\x7a\xc3\xc9\x0a\xa2\x67\x11\x5c\x5f\xfb\xd6\xba\xc7\xd5\xf6\xfe\x90\x7b\xe5\x68\xf1\x0b\x42\x86\x9c\xe1\x1a\xc1\x14\x4c\x83\xc2\x5c\x2a\x0a\x46\x42\x86\xd0\x4a\xcd\x5a\x87\x5a\x2f\x90\x6b\xbc\xdd\x95\xa7\x77\x75\x45\x48\x33\x70\x47\x48\xb0\x89\x86\xea\x38\xc7\xbc\x51\xfb\x24\x6c\x5e\x75\x84\x3a\x1a\x4f\xfa\x64\xb2\x99\xd3\x3e\x9c\xf4\xa9\x1a\x3a\x47\xd1\x10\xc6\x75\x34\x49\xfd\x2b\xac\x14\xe6\xc4\x20\x3d\x8e\x7d\xda\xeb\x47\x8b\x8f\x41\x70\x05\xd1\x90\x21\x0a\x28\x89\xfa\x8c\x14\x88\x86\xad\xe8\x38\x58\x17\xde\xe9\xc9\x94\x7f\x1f\xea\x0a\x95\x46\xba\xcf\x3f\xfb\x77\xd2\xae\xee\x15\x21\x6b\xc0\x14\x08\x4b\xc9\xb9\xdc\x30\xb1\x6a\x65\xf5\x99\x2b\xf0\x90\xd6\x7c\xf2\x24\x48\x26\x0c\xaa\x96\x37\xfb\xe7\xcb\x17\x50\x44\xac\x10\x1e\xb2\x27\xf0\x50\xc3\xd9\xdc\x7b\xb9\xf5\xf1\x2f\x4d\xeb\x96\xc3\xe5\x6c\x91\x92\xae\x55\xfa\x2a\xf1\x50\xbb\x8a\x35\x61\x8e\x51\x18\x9d\x78\xb6\x6c\xf6\x57\x7e\x0f\xb4\xe8\x3e\xa5\x09\x59\xa4\x09\x67\xa1\xaf\x1d\xad\x3e\x4d\x6a\xde\xbe\x9b\xf9\x1f\x43\xee\x2d\xf9\xfb\xa8\x67\x62\x35\xc5\xbd\x87\x09\xb9\xef\x29\xd7\x37\xf0\x7d\x27\xb6\x6f\x65\x5a\x77\xe9\xf9\xbf\xe2\x78\xc0\x6f\xcf\xee\xcc\xa7\x64\xf0\xb2\x2d\xf6\xfd\x71\xad\xf9\xce\xf9\xcc\x88\x66\xb9\x0b\xdc\x46\xb3\xf7\xce\xb3\xf7\x24\x32\xba\xad\xbe\xae\x01\x75\x45\x9a\x08\x0a\xcc\xd8\xed\xb1\x8d\x71\x8d\xf0\xe9\xfd\x85\x43\xea\x08\x2b\x8c\xa9\xf4\x59\x92\x58\x02\x66\xe1\x28\x24\xd5\x2a\xd9\x19\x1c\x26\x4c\x2b\xe4\x76\xca\x08\x7a\x85\x17\xb6\x54\xcd\x3c\x57\xe3\xbc\xea\x47\x8b\x28\x7e\xe1\x13\xc9\x46\x1d\xa4\xd1\x23\x0d\x7e\x22\xe9\xe2\xce\x25\xc5\x45\xfc\x22\x4d\xdc\x07\xd8\x14\x2c\x2f\x80\x09\xca\x6c\x2d\xd1\xc0\x8c\x3b\xf4\x65\xcd\x0d\xab\x38\xb6\xca\xb6\x0a\xe4\xa4\xd6\xb8\x1b\xed\x8a\x99\xa2\xce\xec\xb4\x1b\x0e\xa1\xc9\x20\x1b\xfb\x2b\x48\x62\x14\x62\x52\x12\x6d\x50\x25\xc1\xf2\x46\x2e\x1f\x78\x4b\xbf\x5a\xfe\x9d\x13\x55\x85\x42\x83\x96\x25\x1a\x56\xa2\x0e\x48\x38\x99\xe8\x35\x01\x11\xcf\x0f\x21\xe2\xf9\x90\x88\x12\x89\x70\x24\x94\x76\xde\x00\x8e\x2b\x66\x58\x49\x0c\xf2\x06\x0a\xb2\xc6\x5d\x62\xbe\x09\x21\x1d\xfb\x15\x4a\x6b\x9b\xa8\x55\x8d\x40\x32\x59\x1b\xdf\x03\xb5\x54\x06\xe4\xd2\x3e\x88\xd5\xdd\x99\xfa\xe1\x10\xa6\x9e\x4d\x31\xb5\x41\x47\x8b\x78\x64\x20\x93\xa6\x40\x85\x14\x8c\x6a\x6c\x99\x32\x12\x2a\x26\x80\xca\x8d\x08\x1b\xf5\x23\x0d\xac\x2c\x91\x32\x62\x3a\x12\xbf\x6d\x72\x71\xb6\x44\x1b\x56\x2e\xcb\x8a\xbb\xac\xa7\x41\x2d\xba\x99\xb0\x67\xb7\x13\x76\xb1\x4b\x98\xa5\xca\x32\xb2\xb1\x3b\xf7\x8d\xa2\xac\x45\x8e\xca\x10\x26\x6c\x6c\xed\x96\xb5\x8d\xa5\xcb\x5c\xb7\x29\x52\xe0\x38\x57\xba\x08\x2f\x8c\xa5\xc9\x4b\xfb\xbe\x3f\xee\x0d\x03\x7a\xee\xa7\x4b\x8c\x21\x17\xbb\xd5\x7b\x57\x6a\x9c\xf1\xfd\x04\xd4\xb5\x80\x4c\xd6\xc2\x76\x5e\xc8\xe4\xd5\xa0\x66\x3f\x98\xf4\x79\x85\xb6\xea\xa8\x06\xa6\x16\xe3\x0e\x2c\x93\x57\xdb\x52\x3d\xb8\x71\x3d\x81\x3d\xb7\xab\xe0\x45\x78\x95\x1a\x2e\x07\xf2\x6e\xf3\xba\xc6\x53\x29\x26\x72\x56\x11\x0e\x39\x0a\xa3\x24\xa3\x5f\x1d\x4a\x07\xb4\x8d\x23\xb8\x87\x6e\xbd\x1a\xbb\xd4\x35\xa3\x6e\x68\xb6\xfd\x3a\xb8\xde\xed\xde\xf5\x38\x2e\x4d\xac\x0b\xa2\x3e\xdb\xc6\x7c\x7a\xe2\xa5\x6c\xaf\x2f\x5e\x2c\x2e\xfb\x24\x4e\x93\xe2\xc5\xf6\xbb\xfa\xa9\xe9\x7b\x9b\xf0\xdd\x20\x79\x8b\x58\x5c\x29\x34\xa6\xe9\xa5\xdd\x00\xd1\x5a\xb8\x5d\x59\x91\xcd\x50\xd3\xcf\x27\xfe\xd3\x78\x18\x49\x06\xa1\x8f\x5e\x76\x86\x94\xed\x2b\x3d\x15\xa7\xd3\x77\x8c\x82\xa1\x22\x2a\x2f\x9c\xdb\x3d\xd2\xb4\xac\xbf\x39\x44\xed\x17\xee\xc5\x8b\xc5\x07\xb7\x30\xa4\xd2\x90\xac\xfd\x7d\x99\x7d\x50\xfd\x5c\x9b\x9a\x62\xf1\x7f\x0f\x9e\xfd\xe1\xe9\xcb\x34\x31\xc5\x60\xb9\x83\x19\x2d\xff\x9d\xf0\x1a\x77\x56\xcf\xad\x37\x14\x45\x1e\xbe\x4a\x93\xde\xd2\xd8\x66\x7b\x2f\x1c\xe1\xd0\xfd\x37\xa3\x60\x26\x9b\xba\x54\xda\xb4\x34\xf4\x78\xa8\x0b\xfd\x51\xd5\x78\x0f\x30\x3f\x09\xdb\xee\x06\x38\x37\xd1\x80\x44\xdb\xee\x73\x14\x0b\x4e\xf7\x5e\x48\xf0\x48\x5f\xcb\x41\x87\x72\x18\x05\xdb\x1b\xf3\x71\x34\x4c\xdf\xb8\x8f\x0d\x22\x40\xdb\x4b\xc7\x3e\xf1\xc3\xe2\xde\xde\x72\x8f\x8b\x7b\xfa\x26\x7f\x6c\xdc\x01\xda\x57\xa6\xc1\x00\xe9\x38\x4a\xdc\x08\xfb\x35\x9c\x8c\xae\xd8\x5f\x1b\x8a\x85\xbb\x27\x56\x3c\xd4\x3e\x5a\x4e\xa0\xab\xd7\x49\x57\xb0\xbb\xa6\x32\xec\x98\x1f\x64\xad\x72\x74\x33\xd4\xb0\xce\xf7\x5f\x4b\x0c\x6e\xf2\x07\x5d\x4c\x17\x87\x48\x8f\xbe\x28\x99\xb4\x3a\x3d\xdd\xc6\x16\xbe\x87\x7b\x8f\x95\x84\xeb\xeb\x24\xe3\x32\xeb\x66\xdb\x81\xc0\x8e\x77\xf7\x89\x3a\x88\xa2\xfd\xf6\x61\xba\xb9\xfb\x07\xbf\x18\x2c\xb9\x5f\x63\x64\x92\x36\x8b\xd3\x34\xf1\xff\xef\xe5\x3f\x01\x00\x00\xff\xff\x49\x00\x4f\xd8\x08\x23\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 8968, mode: os.FileMode(420), modTime: time.Unix(1514133820, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

