// Code generated by go-bindata.
// sources:
// templates/html/id.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIdHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x6d\x8f\xdb\xb8\x11\xfe\xec\xfd\x15\x53\x25\x68\x72\x40\x64\x25\x97\xb4\x68\x37\xb2\xd0\xeb\x26\x41\x17\x97\xf4\x16\x79\xe9\xb5\x9f\x0e\x94\x38\xb6\x78\xa1\x48\x1d\x49\xd9\xeb\xa6\xfb\xdf\x0b\x92\x92\x45\xd9\xd2\xbe\x78\xd3\x34\x40\xb2\x16\x3d\xf3\xcc\xcc\xc3\xe1\xcc\x50\x9b\xf4\x77\xaf\x7e\x3a\xfb\xf8\xaf\x8b\xd7\x50\x9a\x8a\x67\x27\xa9\xfd\x01\x9c\x88\xd5\x22\x42\x11\x65\x27\x00\x69\x89\x84\x66\x27\x33\x80\xd4\x30\xc3\x31\xfb\xf2\x05\xe6\x1f\x2e\xde\xcf\xff\x4e\x2a\x84\xab\x2b\xf8\x0f\x74\x2b\xe7\xd4\x3f\xff\x5c\xca\x47\x1a\x7e\x12\xf0\x86\x29\x6d\xd2\xc4\xeb\x39\x88\x0a\x0d\x81\xd2\x98\x3a\xc6\xdf\x1a\xb6\x5e\x44\x67\x52\x18\x14\x26\xfe\xb8\xad\x31\x82\xc2\x3f\x2d\x22\x83\x97\x26\xb1\xce\xbc\x84\xa2\x24\x4a\xa3\x59\x7c\xfa\xf8\x26\xfe\x53\x14\xc0\x08\x52\xe1\x22\x52\xb8\x44\xa5\x50\x05\xca\x52\xb1\x15\x13\xd1\x84\xc5\x7f\xc6\x9f\x7e\x88\xcf\x64\x55\x13\xc3\x72\x1e\x1a\x3d\x7f\xbd\xf8\x73\x04\xc9\x81\x09\x52\xd7\x1c\xe3\x4a\xe6\x8c\x63\xbc\xc1\x3c\x26\x75\x1d\x17\xa4\x26\x43\xf5\x2d\xea\x5b\x6b\x6b\x43\x4c\xa3\xe3\x9c\xa8\x58\x9b\xed\x00\x26\xe7\xa4\xf8\x3c\x06\xf4\x37\x22\x68\x89\x9c\xbe\x51\x0c\x05\xe5\xdb\x90\x2e\xd5\xe0\x98\xca\x9a\xe1\xa6\x96\xca\x04\xa2\x1b\x46\x4d\xb9\xa0\xb8\x66\x05\xc6\xee\xe1\x09\x30\xc1\x0c\x23\x3c\xd6\x05\xe1\xb8\x78\xf6\x04\x2a\x72\xc9\xaa\xa6\x0a\x16\x98\x18\x2e\x34\x1a\x95\x7b\xb2\x24\x2c\x84\x74\xd6\x7b\xf3\xb5\x92\x35\x2a\xb3\x5d\x44\x76\x13\x4f\x39\xd1\xa6\x92\x94\x2d\x19\xd2\xc0\x17\x9b\x38\x6f\x89\x36\xef\xda\xaf\xe0\xea\xaa\x8b\x62\x0c\x4a\xae\x4e\xcd\x30\x4d\x88\x32\xac\xe0\x7b\xa1\x0f\x14\x34\x33\xf8\x8b\x25\x23\xd0\x1a\xe6\xe7\x35\xca\x2e\x71\xf7\xfc\x0d\x53\x9f\x69\x20\xbb\xec\xbf\xe0\xa4\x40\xeb\x9f\xfb\x46\xec\xd6\xcf\x64\x23\x8c\xda\xf6\xa1\x8d\x18\xa2\xa8\x0b\xc5\x6a\xc3\xa4\x08\xf3\xd1\xe8\xbd\xb3\x04\xe7\xaf\xac\xd1\xc1\x81\xbb\x06\x96\x55\x64\x15\xfa\x9f\x30\x9a\x0c\x74\xe7\x7a\xbd\x9a\xdc\x39\xb3\x61\xc6\xa0\x3a\x2d\x88\xa2\x11\xac\x09\x6f\x70\x11\xe9\xa6\xaa\x88\xda\x4e\x19\xed\x74\x2c\xed\x81\xe1\xbf\x10\xce\xe5\xd2\x94\x58\x5b\x92\xf4\x4d\xda\x85\x42\x62\xa4\x3a\x1e\xa0\x51\xfc\xba\xb0\x6f\x52\xff\x36\xfb\xde\x59\xfb\x5f\x6c\x7e\x87\x7d\x87\x0c\x00\x0b\xc3\x99\xf8\x0c\x0a\xf9\x22\x72\x65\x49\x97\x88\x26\x82\x52\xe1\x72\x11\x25\x85\xd6\x49\x45\xea\x7f\xa3\x98\xff\xaa\xe7\x85\xd6\x6d\x89\xf5\xee\x83\x56\xc5\x22\x4a\x7e\x25\x6b\xe2\x17\x3a\xd9\x8a\x59\xf9\x28\x4b\x13\xbf\xee\xb2\x6d\x52\x89\xcb\x82\xf0\xa5\x54\x64\x85\x87\x9a\xbe\x30\x4c\xea\x6a\xce\xea\x7a\x5b\x91\x7a\x5e\x28\xa9\x75\x49\x98\xd2\x77\x30\xbd\x29\xa5\x96\x62\x69\xb9\x9e\x17\xa4\x28\x71\xdf\xf8\x6d\x95\x1b\xc5\xf6\xcc\xde\x52\x51\xa0\x39\x52\x91\x54\x6c\xb9\x1d\xea\xc2\x0c\x66\xe0\xf6\xf5\xe6\x6d\x0d\xb1\x36\x9b\x4d\xbb\xb9\x77\x56\x2d\x64\x55\x49\xe1\xb5\x1d\x5d\x27\x77\x45\xb0\x8d\x91\x15\x73\x46\x77\xf9\x75\xab\xf8\x7b\xb5\xc9\xed\xb6\x47\xb4\x1d\x2c\x7a\x10\x9f\xc1\xb0\x61\x82\xca\xcd\x9c\x50\xfa\x7a\x8d\xc2\xbc\x65\xda\xa0\x40\xf5\x38\xe2\x92\xd0\xe8\x09\x2c\x1b\x51\xd8\xf3\x09\xf6\xf9\x31\x5a\x99\xef\xbe\x38\xcd\xd9\xb8\x17\xb6\xa3\x3e\xfe\xee\xa5\x13\xb9\x72\x3f\x7b\x9f\x00\xd2\xc4\x0f\x55\x00\x69\x2e\xe9\x16\x28\x31\x24\xf6\xa7\x25\x26\x35\xfb\x8c\x5b\x5f\x73\xde\xb9\xa5\x1f\x2e\xce\x7f\xc4\xad\x3d\xec\x56\x03\xc0\xfd\x93\x52\xb6\x86\x82\x13\xad\x17\x51\xe0\x42\x04\x8c\x0e\x16\x62\x57\x30\x23\x6f\x22\x5c\xb7\x72\x7b\xa5\xe4\x40\xa6\x26\xa6\xec\xa5\x2e\x88\x29\xa7\xe4\x94\x9d\xe1\x42\xc8\x0b\xb7\x14\x02\x73\x62\x98\x69\x28\xf6\x32\x6f\xdb\x95\x40\x46\x8a\xd5\xbe\x50\xb7\xd4\x4b\x55\x4c\x8c\xa0\xbd\x63\xa2\x03\x1c\x4a\x1e\x62\x5a\xd1\x11\x58\x72\x39\x06\x4b\x2e\x0f\x61\xad\xe4\x08\x2c\xb9\x1c\xc0\xda\xa2\x0a\xbb\xcd\xb2\xec\x54\xa4\xb6\x19\x97\xb2\x6a\xd5\xe6\xf3\x78\x3d\x2e\x91\xad\x4a\xb3\x88\x9e\xff\xe1\xa9\x2b\xce\x2d\x4c\x42\xd9\xba\x7b\xe8\xd6\xca\xef\x2d\xa0\xae\x89\x18\x49\x87\xd8\x4d\x3e\x2e\xc7\xf7\x7a\x58\x9a\x58\x95\x0c\xbc\xe6\x68\xd2\xc4\x94\x18\xf4\xa7\xc9\x89\xba\xae\x37\x69\xa9\xee\xda\x60\x94\x8d\x75\xc6\x1d\x88\x18\x42\xf4\xd2\xbb\x7e\xe9\x8a\x7c\x2b\x3f\x3f\xb1\xc1\x55\x84\xf3\x2e\x08\xb6\x04\xfc\xad\x25\x4c\x9f\x35\xca\xa6\xd9\xfc\x83\x51\x4c\xac\xde\x70\xb2\x82\xe8\x59\x04\x57\x57\xbe\x2f\x4d\xb8\xda\x0e\xdf\x85\x57\x8e\xb2\x9f\x11\x72\xe4\x0c\xd7\x08\xa6\x64\x1a\x14\x16\x52\x51\x30\x12\x72\x84\x56\x6a\xde\x3a\xd4\x7a\x81\x5c\xe3\xcd\xae\x3c\xbd\xad\x2b\x42\x9a\x81\x3b\x42\x82\xcd\x2f\x54\xc7\x39\xe6\x8d\xda\x27\x61\x73\xaa\x23\xd4\xd1\x38\xdb\x25\x93\xcd\x9c\xf6\x61\xb6\xcb\xd0\xd0\x39\x8a\x86\x30\xae\xa3\x51\xea\x5f\x61\xad\xb0\x20\x06\xe9\x71\xec\xd3\x9d\x7e\x94\x7d\x0c\x82\x2b\x89\x86\x1c\x51\x40\x45\xd4\x67\xa4\x40\x34\xf4\xa2\xfb\xc1\xba\xf0\x4e\x66\x63\xfe\x7d\x68\x6a\x54\x1a\xe9\x94\x7f\xf6\xef\xa8\x5d\xbd\x53\x84\x7c\x0b\xa6\x44\x58\x4a\xce\xe5\x86\x89\x55\x2b\xab\x4f\x5d\x5d\x87\xb4\xe1\xa3\x27\x41\x32\x61\x50\xb5\xbc\xd9\x3f\x5f\xbe\x80\x22\x62\x85\xf0\x90\x3d\x81\x87\x1a\x4e\x17\xde\xcb\xde\xc7\xbf\x6e\x5b\xb7\x1c\x2e\x67\x59\x4a\xba\x0e\xe9\x2b\xc4\x43\xed\x0a\xd5\x88\x39\x46\x61\xef\xc4\xb3\xe5\x76\xba\xe0\x7b\xa0\xac\xfb\x94\x26\x24\x4b\x13\xce\x42\x5f\x3b\x5a\x7d\x9a\x34\xbc\xfd\x6e\xee\x7f\x0c\xb9\xb7\xe4\x4f\x51\xcf\xc4\x6a\x8c\x7b\x0f\x13\x72\xbf\xa3\x5c\x5f\xc3\xf7\xad\xd8\xbe\x91\x69\xdd\xa5\xe7\xff\x8b\xe3\x01\xbf\x3b\x76\xe7\x3e\x25\x83\x2f\xdb\x62\xbf\x3b\xae\x0d\x3f\x38\x9f\x39\xd1\xac\x70\x81\xdb\x68\x26\x2f\x0c\x93\x27\x91\xd1\xbe\xfa\xba\xe6\xd3\x15\x69\x22\x28\x30\x63\xb7\xc7\xf6\xc3\x35\xc2\xa7\xf7\xe7\x0e\xa9\x23\xac\x34\xa6\xd6\xa7\x49\x62\x09\x98\x87\x13\x90\x54\xab\xe4\x60\x5e\x18\x31\xad\x90\xdb\xe1\x22\xe8\x15\x5e\xd8\x52\x35\xf7\x5c\xed\xe7\xd5\x6e\xa2\x88\xe2\x17\x3e\x91\x6c\xd4\x41\x1a\x3d\xd2\xe0\x07\x91\x2e\xee\x42\x52\xcc\xe2\x17\x69\xe2\x3e\xc0\xa6\x64\x45\x09\x4c\x50\x66\x6b\x89\x06\x66\xdc\xa1\xaf\x1a\x6e\x58\xcd\xb1\x55\xb6\x55\xa0\x20\x8d\xc6\xc3\x68\x57\xcc\x94\x4d\x6e\x87\xdc\x70\xf6\x4c\x06\xd9\xe8\x6f\x60\x0c\x75\x62\x14\x62\x52\x11\x6d\x50\x25\xc1\xf2\x46\x2e\x1f\x78\x4b\xbf\x58\xfe\x9d\x13\x75\x8d\x42\x83\x96\x15\x1a\x56\xa1\x0e\x48\x98\x8d\xf4\x9a\x80\x88\xe7\x77\x21\xe2\xf9\x90\x88\x0a\x89\x70\x24\x54\x76\xd6\x00\x8e\x2b\x66\x58\x45\x0c\xf2\x2d\x94\x64\x8d\x87\xc4\x7c\x13\x42\x3a\xf6\x6b\x94\xd6\x36\x51\xab\x06\x81\xe4\xb2\x31\xbe\x07\x6a\xa9\x0c\xc8\xa5\x7d\x10\xab\xdb\x33\xf5\xfd\x5d\x98\x7a\x36\xc6\xd4\x06\x1d\x2d\xe2\x91\x81\x5c\x9a\x12\x15\x52\x30\x6a\x6b\xcb\x94\x91\x50\x33\x01\x54\x6e\x44\xd8\xa8\x1f\x69\x60\x55\x85\x94\x11\xd3\x91\xf8\x6d\x93\x8b\xb3\x25\xda\xb0\x0a\x59\xd5\xdc\x65\x3d\x0d\x6a\xd1\xf5\x84\x3d\xbb\x99\xb0\xf3\x43\xc2\x2c\x55\x96\x91\x8d\xdd\xb9\x6f\x14\x65\x23\x0a\x54\x86\x30\x61\x63\x6b\xb7\xac\x6d\x2c\x5d\xe6\xba\x4d\x91\x02\xf7\x73\xa5\x8b\xf0\xdc\x58\x9a\xbc\xb4\xef\xfb\xfb\xbd\x61\x40\xcf\xd7\xe9\x12\xfb\x90\xd9\x61\xf5\x3e\x94\xda\xcf\xf8\xdd\x04\xd4\xb5\x80\x5c\x36\xc2\x76\x5e\xc8\xe5\xe5\xa0\x66\x3f\x18\xf5\x79\x85\xb6\xea\xa8\x2d\x8c\x2d\xc6\x1d\x58\x2e\x2f\xfb\x52\x3d\xb8\x68\x3d\x81\x89\x4b\x55\xf0\x45\x78\x83\x1a\x2e\x07\xf2\x6e\xf3\xba\xc6\x53\x2b\x26\x0a\x56\x13\x0e\x05\x0a\xa3\x24\xa3\xf7\x0e\xa5\x03\xea\xe3\x08\xae\x9f\xbd\x57\xfb\x2e\x75\xcd\xa8\x1b\x9a\x6d\xbf\x1e\x5e\xc0\xc6\x26\x67\x3f\xe3\xda\x0b\xe0\x2c\x2d\x5f\x64\x1f\xdc\x63\x9a\x94\x2f\x32\xb7\x55\x86\xe4\xdd\x2f\x44\x8c\x6a\xa7\xab\xd4\x94\xd9\xef\x1f\x3c\xfb\xe3\xd3\x97\x69\x62\xca\x60\xb1\x53\x1e\x2c\xfe\x83\xf0\x06\xf7\xd6\xce\xac\x75\x8a\xa2\xe8\xbf\x48\x93\x16\x7f\x68\xa7\xbd\xab\x0c\xf4\xe9\xf4\xac\x1e\x4c\x09\x63\xd7\x1c\x4b\x94\xa1\xc7\x02\x9d\xeb\x8f\xaa\xc1\x7b\x83\xfc\x28\x6c\xf1\x0d\x50\xa6\x42\x47\xa2\x6d\x15\x3c\x22\x72\xa7\xf9\x15\x02\xf7\x38\xf7\x8b\xbb\xc3\xb8\x6d\xd8\xfd\x6d\xed\x98\xd0\xc7\xef\x7a\xc7\xb9\x1e\x60\x4d\x50\x30\x25\x7c\x10\xeb\x64\xb4\xfd\xbd\xea\x98\x68\xc7\x6f\x8e\xc7\x45\x1b\x60\xdd\x6b\xc3\x07\x38\x77\x27\xc2\x8d\x4a\xc7\x33\xb1\x77\x91\xbb\x5f\x08\x16\xec\xab\x70\xe1\x81\xc6\x4f\xc0\x0c\xda\x97\x1e\x6d\xa9\x1d\xbc\x40\x0b\x2a\x77\xe6\x0b\xf4\xc5\x6e\xb8\xf0\x45\xfa\x64\xfc\x85\x48\x3f\x83\xb4\xbf\xf9\xb8\x5e\x28\x56\x64\x13\x65\xdd\x45\xee\x66\xf1\x5a\xa1\x31\xdb\x4e\xa3\x0d\x20\x78\xe5\x37\xfa\xfe\xcf\x47\xe4\xdb\x8c\x6c\x54\x81\x6e\xde\xe8\x7b\x4d\x7b\xc1\x1c\xdc\x77\xef\x74\x7d\xcb\xee\x22\x3d\xb8\xea\x8e\xda\x1c\x9f\x00\x63\x0b\xbe\x03\x7b\x8f\xb5\x84\xab\xab\x24\xe7\x32\xef\xe6\xbf\x81\xc0\x81\x6f\x5f\x13\x35\x88\xa1\xbd\x9f\x1f\xf2\x1f\x7c\x74\xef\xf3\x73\x49\xb7\xd9\x49\x9a\xf8\xff\x46\xf1\xdf\x00\x00\x00\xff\xff\xf6\x24\xac\x55\x57\x21\x00\x00")

func templatesHtmlIdHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIdHtml,
		"templates/html/id.html",
	)
}

func templatesHtmlIdHtml() (*asset, error) {
	bytes, err := templatesHtmlIdHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/id.html", size: 8535, mode: os.FileMode(420), modTime: time.Unix(1514073604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/id.html": templatesHtmlIdHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"id.html": &bintree{templatesHtmlIdHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
