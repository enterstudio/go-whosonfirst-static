// Code generated by go-bindata.
// sources:
// templates/html/spr.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlSprHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x4b\x8f\xdb\x36\x10\x3e\xef\xfe\x0a\x56\x97\x5e\x22\x13\x4d\x2e\x6d\x4a\x09\x2d\x9c\x2c\x6a\xf4\x91\x20\xd9\xf4\x71\x2a\x46\xe2\xac\xc4\x86\x22\x19\x92\xf2\x03\xa9\xff\x7b\x41\xca\xb2\x29\xbf\x36\x2d\xd2\xd3\x6a\x86\xdf\x7c\xdf\xa7\x21\x39\xf2\xb2\x2f\x5e\xbc\x9a\xdf\xff\xf1\xfa\x25\x69\x7d\x27\xcb\x5b\x16\xfe\x10\x09\xaa\x29\x32\x54\x59\x79\x4b\x08\x6b\x11\x78\x79\x7b\x43\x08\xf3\xc2\x4b\x2c\x3f\x7e\x24\xb3\x5f\xa0\x43\xb2\xdd\x92\xbf\x49\x88\x16\x7c\x78\xfe\xad\xd5\x5f\x3a\xf2\x4a\x91\x3b\x61\x9d\x67\x74\xc0\xc7\xd2\x0e\x3d\x90\xd6\x7b\x93\xe3\x87\x5e\x2c\x8b\x6c\xae\x95\x47\xe5\xf3\xfb\x8d\xc1\x8c\xd4\x43\x54\x64\x1e\xd7\x9e\x06\x13\xdf\x92\xba\x05\xeb\xd0\x17\xef\xee\xef\xf2\xaf\xb3\x84\x46\x41\x87\x45\x66\xf1\x01\xad\x45\x9b\x14\x6b\x2b\x1a\xa1\xb2\x0b\x8a\xbf\xe7\xef\xbe\xcf\xe7\xba\x33\xe0\x45\x25\x53\xd1\xc5\xcb\xe2\x9b\x8c\xd0\x13\x09\x30\x46\x62\xde\xe9\x4a\x48\xcc\x57\x58\xe5\x60\x4c\x5e\x83\x81\x69\xf9\x06\xdd\x27\x57\x3b\x0f\xbe\x77\x79\x05\x36\x77\x7e\x33\xa1\xa9\x24\xd4\xef\xcf\x11\xfd\x00\x8a\xb7\x28\xf9\x9d\x15\xa8\xb8\xdc\xa4\xed\xb2\x3d\x9e\x2b\x59\x0a\x5c\x19\x6d\x7d\x02\x5d\x09\xee\xdb\x82\xe3\x52\xd4\x98\xc7\xe0\x09\x11\x4a\x78\x01\x32\x77\x35\x48\x2c\xbe\x7a\x42\x3a\x58\x8b\xae\xef\x92\x84\x50\xd3\x44\xef\xd0\xc6\x28\x34\xa1\x50\x3a\xaa\x1f\xe4\x8d\xd5\x06\xad\xdf\x14\x99\x6e\x9e\xfb\xe9\xde\x82\xf5\xa2\x96\x47\x7e\x27\x05\x4e\x78\xfc\x33\xbc\x41\x52\x35\x3d\x54\x57\x8a\xe3\x69\x4b\x0a\xd3\x73\x2a\x1c\x81\x78\x54\x5f\x4b\xa8\x31\xf8\x8a\x59\x15\x73\x73\xdd\x2b\x6f\x37\xdb\xed\x15\x72\x8e\xae\xb6\xc2\x78\xa1\x55\x7a\x70\xbc\x3b\x3a\xf4\x64\xf1\x22\x88\xed\x6f\xc5\x15\x4a\xd1\x41\x93\xfa\xa5\x31\xe1\xe8\x4a\x3f\xe4\xee\x43\x6e\x84\x7a\x3f\xfb\xcb\x34\x17\x1b\xec\x57\xc2\x7b\xb4\xcf\x6b\xb0\x3c\x23\x4b\x90\x3d\x16\x99\xeb\xbb\x0e\xec\xe6\x92\xec\x58\x13\x1a\x9d\x48\x7f\x07\x52\xea\x07\xdf\xa2\x09\xed\x71\x8f\x55\xd7\x16\xc1\x6b\xfb\xdf\x09\x7a\x2b\x27\x2f\xce\xe9\xa3\x0d\x1b\x4b\xff\xbf\x5d\x1e\x15\x3e\xf7\x56\x8f\xbc\xff\x66\xbf\x6f\x08\x09\xa3\x97\x0e\xb3\x97\x10\x56\x69\xbe\x09\x0f\x31\x4f\x08\xe3\x62\x49\x6a\x09\xce\x15\xd9\xaa\xd5\x4e\xab\x87\xe1\x76\x70\xf0\x90\x27\x99\x5c\xf0\x09\x22\x4f\xec\x9e\x60\x0d\xd8\x30\x92\x43\x49\xec\x62\x0c\x07\xf0\xa0\xbd\x13\x0e\x80\x0e\x4c\x56\x32\xca\xc5\xb2\xbc\x1d\xd7\xda\xa7\x93\x8f\x03\x73\x1d\x48\x59\x5e\xdc\x15\xe6\x0c\xa8\x72\xb2\x37\x8c\xc6\x1c\x19\x9c\x20\x27\xd5\x26\x81\x8d\x86\xf6\x38\x46\x07\x09\x46\xdb\xa7\x7b\x87\xed\xb3\xf2\xf1\xcd\x1a\xcd\x81\xe2\x44\x78\x47\x2c\x4a\xf0\x62\x89\xe4\xdd\x9b\xc5\x08\x7c\x0d\xbe\x25\x51\x6b\x14\x79\x76\x78\xd7\xb1\x0f\x69\xff\x86\xe1\x1e\xbe\x3f\xcc\x87\xf1\xb8\xfb\x6a\xda\x92\xf9\xb6\xbc\x93\xd0\x30\xea\xdb\x18\xbc\x8d\xc8\x7d\xf8\x6b\xb8\xbc\xfb\x68\x1e\xf8\x38\xaa\x7a\x97\xa2\xde\x26\x4c\xbc\x9c\xf7\x36\xf4\x81\x51\xcf\x63\x1c\x5f\xca\xed\xb2\xb3\xb7\xde\x0a\xd5\x04\xb5\xe8\xfd\x2c\x66\xe1\xee\x6d\x8f\xd7\xd6\x7f\x54\x7a\xa5\x06\xc0\x91\x38\x82\x43\x7e\x5c\x17\x93\xd7\xa5\x07\xc8\x45\xe5\x71\xf9\xa2\xf0\x0b\x34\x16\x6b\xf0\x27\xe2\x87\x85\xab\x06\x12\xd8\x25\x13\x13\xc8\x45\x23\x0b\xf7\xb6\x37\x68\x1d\xf2\x13\x2b\x87\x85\xab\x56\x12\xd8\x25\x2b\x13\xc8\x27\x58\x11\xaa\xb9\xc0\x20\x54\xf3\x49\x66\x02\xee\x31\x37\x03\x66\x62\xe7\x86\x84\x59\x75\xc3\xe8\xee\xc4\xef\xae\xc7\x30\x18\x86\xe0\xda\x95\x69\x50\x77\xbb\x49\x14\x2e\xa0\xef\x39\x0e\xc3\xe7\xa7\x5d\x74\x98\x54\x52\xab\x26\x05\x8c\xe1\x01\xd1\x09\x75\xc4\xf2\xb3\x50\x23\xd1\x14\x35\xe5\x0a\xb0\x33\x74\xb0\x3e\xa6\x83\xf5\x29\x5d\x40\x1d\xd1\xc1\x7a\x42\x57\xde\xde\x84\x89\x54\xe9\x5e\x85\x16\x92\x4a\xaf\xc3\x8c\x61\xb5\xe6\xc3\xcf\xe9\x89\xcd\x27\xe4\x8c\xa5\x5d\x32\xd5\x3f\xa4\x12\x1c\xa3\x91\x94\x8c\x73\xcd\x58\xa1\x6a\x61\x40\x92\x1a\x95\xb7\x5a\xf0\xa9\x72\xd2\xe6\x81\xef\x0c\xd9\x6c\xba\xa9\xc9\x76\x86\x49\xd7\xcb\xe1\x48\x4a\x51\x32\x20\xad\xc5\x87\x22\x0b\x3f\xbb\xdd\x73\x4a\x43\x83\x66\xc9\x76\xcf\xb4\x6d\x68\x32\x5a\xb3\x72\x44\x0a\x7e\x16\x17\x67\x35\xa3\x50\x32\x2a\xc5\x65\x9d\x46\xf8\xb6\xaf\x66\xb5\xee\x68\x7a\xb8\x82\x7c\xa4\x79\x83\x46\x93\xed\x96\x56\x52\x57\xb4\x03\xe7\xd1\xd2\xfd\xe2\x89\x97\xcf\xc1\x96\x78\x66\x34\xb6\xe8\xf4\x66\x24\x8f\xf1\x63\x3f\x7c\xe3\x19\x1d\xfe\x15\xfb\x27\x00\x00\xff\xff\xe9\x2e\x6f\x50\x9b\x0d\x00\x00")

func templatesHtmlSprHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSprHtml,
		"templates/html/spr.html",
	)
}

func templatesHtmlSprHtml() (*asset, error) {
	bytes, err := templatesHtmlSprHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/spr.html", size: 3483, mode: os.FileMode(420), modTime: time.Unix(1513174086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/spr.html": templatesHtmlSprHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"spr.html": &bintree{templatesHtmlSprHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

